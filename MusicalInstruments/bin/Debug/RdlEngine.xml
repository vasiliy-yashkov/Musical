<?xml version="1.0"?>
<doc>
    <assembly>
        <name>RdlEngine</name>
    </assembly>
    <members>
        <member name="T:fyiReporting.RDL.Action">
            <summary>
             Action definition and processing.
            </summary>
        </member>
        <member name="T:fyiReporting.RDL.ReportLink">
            <summary>
             Linking mechanism defining the tree of the report.
            </summary>
        </member>
        <member name="T:fyiReporting.RDL.Axis">
            <summary>
             Axis definition and processing.
            </summary>
        </member>
        <member name="T:fyiReporting.RDL.AxisTickMarksEnum">
            <summary>
             AxisTickMarks definition and processing.
            </summary>
        </member>
        <member name="T:fyiReporting.RDL.Body">
            <summary>
             Body definition and processing.  Contains the elements of the report body.
            </summary>
        </member>
        <member name="T:fyiReporting.RDL.CategoryAxis">
            <summary>
             CategoryAxis definition and processing.
            </summary>
        </member>
        <member name="T:fyiReporting.RDL.CategoryGrouping">
            <summary>
             CategoryGrouping definition and processing.
            </summary>
        </member>
        <member name="T:fyiReporting.RDL.CategoryGroupings">
            <summary>
             CategoryGroupings definition and processing.
            </summary>
        </member>
        <member name="T:fyiReporting.RDL.Chart">
            <summary>
             Defines the Chart.  A DataRegion and ReportItem
            </summary>
        </member>
        <member name="T:fyiReporting.RDL.DataRegion">
            <summary>
             DataRegion base class definition and processing.
             Warning if you inherit from DataRegion look at Expression.cs first.
            </summary>
        </member>
        <member name="T:fyiReporting.RDL.ReportItem">
            <summary>
             Base class of all display items in a report.  e.g. Textbox, Matrix, Table, ...
            </summary>
        </member>
        <member name="M:fyiReporting.RDL.ReportItem.SetPagePositionBegin(fyiReporting.RDL.Pages)">
            <summary>
            Updates the current page and location based on the ReportItems 
            that are above it in the report.
            </summary>
            <param name="pgs"></param>
        </member>
        <member name="M:fyiReporting.RDL.ReportItem.Gap(fyiReporting.RDL.Report)">
            <summary>
            Calculates the runtime y position of the object based on the height of objects 
            above it vertically.
            </summary>
        </member>
        <member name="M:fyiReporting.RDL.ReportItem.RelativeY(fyiReporting.RDL.Report)">
            <summary>
            Calculates the runtime y position of the object based on the height of objects 
            above it vertically.
            </summary>
        </member>
        <member name="T:fyiReporting.RDL.ChartBar">
            <summary>
             Bar chart definition and processing.
            </summary>
        </member>
        <member name="T:fyiReporting.RDL.ChartBase">
            <summary>
             Base class of all charts.
            </summary>
        </member>
        <member name="T:fyiReporting.RDL.ChartBubble">
            <summary>
             Line chart definition and processing.
            </summary>
        </member>
        <member name="T:fyiReporting.RDL.ChartColumn">
            <summary>
             Column chart definition and processing
            </summary>
        </member>
        <member name="T:fyiReporting.RDL.ChartData">
            <summary>
             ChartData definition and processing.
            </summary>
        </member>
        <member name="T:fyiReporting.RDL.ChartElementOutputEnum">
            <summary>
             ChartElementOutput parsing.
            </summary>
        </member>
        <member name="T:fyiReporting.RDL.ChartExpression">
            <summary>
             ChartExpression definition and processing.
            </summary>
        </member>
        <member name="T:fyiReporting.RDL.ChartGridLines">
            <summary>
             ChartGridLines definition and processing.
            </summary>
        </member>
        <member name="T:fyiReporting.RDL.ChartLayout">
            <summary>
             Class for defining chart layout.  For example, the plot area of a chart.
            </summary>
        </member>
        <member name="T:fyiReporting.RDL.ChartLine">
            <summary>
             Line chart definition and processing.
            </summary>
        </member>
        <member name="T:fyiReporting.RDL.ChartPaletteEnum">
            <summary>
             ChartPalette enum handling.
            </summary>
        </member>
        <member name="T:fyiReporting.RDL.ChartPie">
            <summary>
             Pie chart definition and processing.
            </summary>
        </member>
        <member name="T:fyiReporting.RDL.ChartSeries">
            <summary>
             Chart series definition and processing.
            </summary>
        </member>
        <member name="T:fyiReporting.RDL.ChartSubTypeEnum">
            <summary>
             The full list of supported chart subtypes
            </summary>
        </member>
        <member name="T:fyiReporting.RDL.ChartTypeEnum">
            <summary>
             Chart type and marker definition and processing.
            </summary>
        </member>
        <member name="T:fyiReporting.RDL.Classes">
            <summary>
             Contains information about which classes to instantiate during report initialization.
             These instances can then be used in expressions throughout the report.
            </summary>
        </member>
        <member name="T:fyiReporting.RDL.Code">
            <summary>
             Code represents the Code report element. 
            </summary>
        </member>
        <member name="T:fyiReporting.RDL.CodeReport">
            <summary>
            This class is only for use with the VB code generation.  
            </summary>
        </member>
        <member name="T:fyiReporting.RDL.CodeParameters">
            <summary>
            This class is only for use with the VB code generation.  
            </summary>
        </member>
        <member name="T:fyiReporting.RDL.CodeUser">
            <summary>
            This class is only for use with the VB code generation.  
            </summary>
        </member>
        <member name="T:fyiReporting.RDL.CodeGlobals">
            <summary>
            This class is only for use with the VB code generation.  
            </summary>
        </member>
        <member name="T:fyiReporting.RDL.CodeModule">
            <summary>
             CodeModule definition and processing.
            </summary>
        </member>
        <member name="T:fyiReporting.RDL.CodeModules">
            <summary>
             CodeModules definition and processing.
            </summary>
        </member>
        <member name="P:fyiReporting.RDL.CodeModules.Item(System.String)">
            <summary>
            Return the Type given a class name.  Searches the CodeModules that are specified
            in the report.
            </summary>
        </member>
        <member name="T:fyiReporting.RDL.ColumnGrouping">
            <summary>
             ColumnGrouping definition and processing.
            </summary>
        </member>
        <member name="T:fyiReporting.RDL.ColumnGroupings">
            <summary>
             ColumnGroupings definition and processing.
            </summary>
        </member>
        <member name="M:fyiReporting.RDL.ColumnGroupings.GetStaticCount">
            <summary>
            Calculates the number of static columns
            </summary>
            <returns></returns>
        </member>
        <member name="P:fyiReporting.RDL.ColumnGroupings.StaticCount">
            <summary>
            # of static columns;  0 if no static columns defined
            </summary>
        </member>
        <member name="T:fyiReporting.RDL.ConnectionProperties">
            <summary>
             Information about how to connect to the data source.
            </summary>
        </member>
        <member name="T:fyiReporting.RDL.ChartMap">
            <summary>
             Column chart definition and processing
            </summary>
        </member>
        <member name="M:fyiReporting.RDL.MapData.#ctor(System.Xml.XmlReader)">
            <summary>
            Creates MapData from XML 
            </summary>
            <param name="xr"></param>
        </member>
        <member name="M:fyiReporting.RDL.MapData.Create(System.String)">
            <summary>
            Given a file name constructs a MapData
            </summary>
            <param name="file"></param>
            <returns></returns>
        </member>
        <member name="M:fyiReporting.RDL.MapData.#ctor">
            <summary>
            this constructor for testing purposes it creates a rough 48 state US map
            </summary>
        </member>
        <member name="T:fyiReporting.RDL.DynamicExpression">
            <summary>
             A report expression: includes original source, parsed expression and type information.
            </summary>
        </member>
        <member name="T:fyiReporting.RDL.IExpr">
            <summary>
            The IExpr interface should be implemented when you want to create a built-in function.
            </summary>
        </member>
        <member name="T:fyiReporting.RDL.Corner">
            <summary>
             Matrix Corner definition and processing.
            </summary>
        </member>
        <member name="T:fyiReporting.RDL.Custom">
            <summary>
            The Custom element allows report design tools to pass information to report output components.
            This element may contain any valid XML. The engine will simply pass the contents of Custom
            unchanged. Client applications using the Custom element are recommended to place their
            custom properties under their own single subelement of Custom, defining a namespace for that
            node.
              Example: 
               <Table><Custom><HTML><SortAble>True</SortAble></HTML></Custom> .... </Table>
                 The HTML renderer uses this information to generate JavaScript to allow
                 user sorting of the table in the browser.
            </summary>
        </member>
        <member name="T:fyiReporting.RDL.CustomReportItem">
            <summary>
            CustomReportItem describes a report item that is not natively defined in RDL.  The 
             RdlEngineConfig.xml file (loaded by RdlEngineConfig.cs) contains a list of the 
             extensions.   RdlCri.dll is a code module that contains the built-in CustomReportItems.
             However, the runtime dynamically loads this so RdlCrl.dll is not required for the
             report engine to function properly.
            </summary>
        </member>
        <member name="T:fyiReporting.RDL.Rectangle">
            <summary>
             Represent the rectangle report item.
            </summary>
        </member>
        <member name="T:fyiReporting.RDL.DataElementOutputEnum">
            <summary>
             Filter operators
            </summary>
        </member>
        <member name="T:fyiReporting.RDL.DataElementStyle">
            <summary>
            Indicates whether textboxes should render as elements or attributes.
            </summary>
        </member>
        <member name="T:fyiReporting.RDL.DataElementStyleEnum">
            <summary>
            Indicates whether textboxes should render as elements or attributes.
            </summary>
        </member>
        <member name="T:fyiReporting.RDL.DataInstanceElementOutputEnum">
            <summary>
             DataInstanceElement definition and processing.
            </summary>
        </member>
        <member name="T:fyiReporting.RDL.DataLabel">
            <summary>
             DataLabel definition and processing.
            </summary>
        </member>
        <member name="T:fyiReporting.RDL.DataPoint">
            <summary>
             DataPoint definition and processing.
            </summary>
        </member>
        <member name="T:fyiReporting.RDL.DataPoints">
            <summary>
             DataPoints definition and processing.
            </summary>
        </member>
        <member name="T:fyiReporting.RDL.DataSetDefn">
            <summary>
             Information about a set of data that will be retrieved when report data is requested.
            </summary>
        </member>
        <member name="T:fyiReporting.RDL.DataSetReference">
            <summary>
             The query to use to obtain a list of values for a parameter.   See ValidValues.
            </summary>
        </member>
        <member name="T:fyiReporting.RDL.DataSetsDefn">
            <summary>
             The sets of data (defined by DataSet) that are retrieved as part of the Report.
            </summary>
        </member>
        <member name="T:fyiReporting.RDL.DataSourceDefn">
            <summary>
             Information about the data source (e.g. a database connection string).
            </summary>
        </member>
        <member name="T:fyiReporting.RDL.DataSourceReference">
            <summary>
             Utitlity class for reading and writing a DataSourceReference file
            </summary>
        </member>
        <member name="M:fyiReporting.RDL.DataSourceReference.Create(System.String,System.String,System.String)">
            <summary>
            Create the named file containing the encrypted input data
            </summary>
            <param name="filename">Output file name</param>
            <param name="indata">Input data to place in file encrypted.</param>
            <param name="pswd">Password phrase to use when encrypting</param>
        </member>
        <member name="M:fyiReporting.RDL.DataSourceReference.Retrieve(System.String,System.String)">
            <summary>
            Retrieve the string data from an encrypted file.   Retrieve assumes 
            that Create was used to create the file.
            </summary>
            <param name="filename">File name to retrieve encrypted data from.</param>
            <param name="pswd">Password phrase used when data was encrypted.</param>
            <returns>Unencrypted string contents of file</returns>
        </member>
        <member name="T:fyiReporting.RDL.DataSourcesDefn">
            <summary>
             Contains list of DataSource about how to connect to sources of data used by the DataSets.
            </summary>
        </member>
        <member name="T:fyiReporting.RDL.DataType">
            <summary>
            Data types
            </summary>
        </member>
        <member name="T:fyiReporting.RDL.DataValue">
            <summary>
             In charts, the DataValue defines a single value for the DataPoint.
            </summary>
        </member>
        <member name="T:fyiReporting.RDL.DataValues">
            <summary>
             In Charts, the collection of data values for a single data point.
            </summary>
        </member>
        <member name="T:fyiReporting.RDL.DefaultValue">
            <summary>
             The default value for a parameter.
            </summary>
        </member>
        <member name="T:fyiReporting.RDL.Details">
            <summary>
             For tabular reports, defines the detail rows with grouping and sorting.
            </summary>
        </member>
        <member name="T:fyiReporting.RDL.Drillthrough">
            <summary>
             Defines information needed for creating links to URLs in a report.  Primarily HTML.
            </summary>
        </member>
        <member name="T:fyiReporting.RDL.DrillthroughParameter">
            <summary>
             A drillthrough parameter.
            </summary>
        </member>
        <member name="T:fyiReporting.RDL.DrillthroughParameters">
            <summary>
             The collection of Drillthrough parameters.
            </summary>
        </member>
        <member name="T:fyiReporting.RDL.DynamicCategories">
            <summary>
             In Matrix, the dynamic categories.
            </summary>
        </member>
        <member name="T:fyiReporting.RDL.DynamicColumns">
            <summary>
             In Matrix, the dynamic columns with what subtotal information is needed.
            </summary>
        </member>
        <member name="T:fyiReporting.RDL.DynamicRows">
            <summary>
             In Matrix, the dynamic rows needed.
            </summary>
        </member>
        <member name="T:fyiReporting.RDL.DynamicSeries">
            <summary>
             In Charts, the dynamic series definition.
            </summary>
        </member>
        <member name="T:fyiReporting.RDL.EmbeddedImage">
            <summary>
             The defintion of an embedded images, including the actual image data and type.
            </summary>
        </member>
        <member name="T:fyiReporting.RDL.EmbeddedImages">
            <summary>
             The collection of embedded images in the Report.
            </summary>
        </member>
        <member name="T:fyiReporting.RDL.Expression">
            <summary>
             A report expression: includes original source, parsed expression and type information.
            </summary>
        </member>
        <member name="T:fyiReporting.RDL.ExpressionType">
            <summary>
             Type expression
            </summary>
        </member>
        <member name="T:fyiReporting.RDL.Field">
            <summary>
             Definition of a field within a DataSet.   
            </summary>
        </member>
        <member name="T:fyiReporting.RDL.Fields">
            <summary>
             Collection of fields for a DataSet.
            </summary>
        </member>
        <member name="T:fyiReporting.RDL.Filter">
            <summary>
             Definition of the filter on a DataSet.  If boolean expression evaluates to false
             then row is not added to DataSet.
            </summary>
        </member>
        <member name="T:fyiReporting.RDL.FilterOperatorEnum">
            <summary>
             Filter operators
            </summary>
        </member>
        <member name="T:fyiReporting.RDL.Filters">
            <summary>
             Collection of Filters for a DataSet.
            </summary>
        </member>
        <member name="T:fyiReporting.RDL.FilterValue">
            <summary>
             A value used in a filter.
            </summary>
        </member>
        <member name="T:fyiReporting.RDL.FilterValues">
            <summary>
              Collection of Filter values to compare against in a filter.  Cardinality depends 
              filter operater.
            </summary>
        </member>
        <member name="T:fyiReporting.RDL.Footer">
            <summary>
              Definition of footer rows for a table or group.
            </summary>
        </member>
        <member name="T:fyiReporting.RDL.GroupEntry">
            <summary>
             Runtime data structure representing the group hierarchy
            </summary>
        </member>
        <member name="T:fyiReporting.RDL.GroupExpression">
            <summary>
             Definition of an expression within a group.
            </summary>
        </member>
        <member name="T:fyiReporting.RDL.GroupExpressions">
            <summary>
             Collection of group expressions.
            </summary>
        </member>
        <member name="T:fyiReporting.RDL.Grouping">
            <summary>
             Grouping definition: expressions forming group, paging forced when group changes, ...
            </summary>
        </member>
        <member name="T:fyiReporting.RDL.Header">
            <summary>
             Definition of the header rows for a table.
            </summary>
        </member>
        <member name="T:fyiReporting.RDL.ICacheData">
            <summary>
            If function caches data then this must be implemented and constructor must place in 
               master report report
            </summary>
        </member>
        <member name="T:fyiReporting.RDL.Image">
            <summary>
             Represents an image.  Source of image can from database, external or embedded. 
            </summary>
        </member>
        <member name="P:fyiReporting.RDL.Image.ImageUrl">
            <summary>
            Only gets set for Images which contain urls rather than coming from the database etc..
            </summary>
        </member>
        <member name="T:fyiReporting.RDL.ImageSizingEnum">
            <summary>
             Handle the image size enumeration.  AutoSize, Fit, FitProportional, Clip
            </summary>
        </member>
        <member name="F:fyiReporting.RDL.ImageSizingEnum.AutoSize">
            <summary>
            The borders should grow/shrink to accommodate the image (Default).
            </summary>
        </member>
        <member name="F:fyiReporting.RDL.ImageSizingEnum.Fit">
            <summary>
            The image is resized to exactly match the height and width of the image element.
            </summary>
        </member>
        <member name="F:fyiReporting.RDL.ImageSizingEnum.FitProportional">
            <summary>
            The image should be resized to fit, preserving aspect ratio.
            </summary>
        </member>
        <member name="F:fyiReporting.RDL.ImageSizingEnum.Clip">
            <summary>
            The image should be clipped to fit.		
            </summary>
        </member>
        <member name="T:fyiReporting.RDL.ImageSizing">
            <summary>
            Use ImageSizing when you want to take a string and map it to the ImageSizingEnum. 
            </summary>
        </member>
        <member name="M:fyiReporting.RDL.ImageSizing.GetStyle(System.String)">
            <summary>
            Given a string return the cooresponding enumeration.
            </summary>
            <param name="s"></param>
            <returns>The enumerated value corresponding to the string.</returns>
        </member>
        <member name="T:fyiReporting.RDL.ImageSourceEnum">
            <summary>
              Handles the Image source enumeration.  External, Embedded, Database
            </summary>
        </member>
        <member name="T:fyiReporting.RDL.Legend">
            <summary>
             Chart legend definition (style, position, ...)
            </summary>
        </member>
        <member name="T:fyiReporting.RDL.LegendLayoutEnum">
            <summary>
             Handle the LegendLayout enumeration: Column, Row, Table
            </summary>
        </member>
        <member name="T:fyiReporting.RDL.LegendPositionEnum">
            <summary>
             Handle Legend position enumeration: TopLeft, LeftTop, ...
            </summary>
        </member>
        <member name="T:fyiReporting.RDL.Line">
            <summary>
             Represents the report item for a line.
            </summary>
        </member>
        <member name="T:fyiReporting.RDL.List">
            <summary>
             Represents the report item for a List (i.e. absolute positioning)
            </summary>
        </member>
        <member name="T:fyiReporting.RDL.Marker">
            <summary>
             Represents a marker on a chart.
            </summary>
        </member>
        <member name="T:fyiReporting.RDL.MarkerTypeEnum">
            <summary>
             Handle MarkerType enumeration: Square, circle, ...
            </summary>
        </member>
        <member name="T:fyiReporting.RDL.Matrix">
            <summary>
              Represents the report item (and Data region) for a matrix (cross-tabulation)
            </summary>
        </member>
        <member name="P:fyiReporting.RDL.Matrix.LastDynColumnGrouping">
            <summary>
            Get the last (dynamic) ColumnGrouping
            </summary>
            <returns></returns>
        </member>
        <member name="P:fyiReporting.RDL.Matrix.LastDynRowGrouping">
            <summary>
            Get the last (dynamic) RowGrouping
            </summary>
            <returns></returns>
        </member>
        <member name="T:fyiReporting.RDL.MatrixCell">
            <summary>
             A Cell within a Matrix.
            </summary>
        </member>
        <member name="T:fyiReporting.RDL.MatrixCellDataElementOutputEnum">
            <summary>
             Handle the Matrix Cell dataElement enumeration: output, nooutput
            </summary>
        </member>
        <member name="T:fyiReporting.RDL.MatrixCellEntry">
            <summary>
             Runtime data structure representing the group hierarchy
            </summary>
        </member>
        <member name="T:fyiReporting.RDL.MatrixCells">
            <summary>
             Collection of matrix cells.
            </summary>
        </member>
        <member name="T:fyiReporting.RDL.MatrixColumn">
            <summary>
             Handle a Matrix column.
            </summary>
        </member>
        <member name="T:fyiReporting.RDL.MatrixColumns">
            <summary>
             Collection of matrix columns
            </summary>
        </member>
        <member name="T:fyiReporting.RDL.MatrixEntry">
            <summary>
             Runtime data structure representing the group hierarchy
            </summary>
        </member>
        <member name="T:fyiReporting.RDL.MatrixLayoutDirectionEnum">
            <summary>
             Handle Matrix layout direction enumeration: LTR (left to right), RTL (right to left)
            </summary>
        </member>
        <member name="T:fyiReporting.RDL.MatrixRow">
            <summary>
             Handle a Matrix Row: i.e. height and matrix cells that make up the row.
            </summary>
        </member>
        <member name="T:fyiReporting.RDL.MatrixRows">
            <summary>
             Collection of matrix rows
            </summary>
        </member>
        <member name="P:fyiReporting.RDL.MatrixRows.CellCount">
            <summary>
            CellCount requires a correctly configured Matrix structure.  This is true at runtime
            but not necessarily true during Matrix parse.
            </summary>
        </member>
        <member name="T:fyiReporting.RDL.Name">
            <summary>
             A report object name.   CLS comliant identifier.
            </summary>
        </member>
        <member name="T:fyiReporting.RDL.NameLookup">
            <summary>
             Parsing name lookup.  Fields, parameters, report items, globals, user, aggregate scopes, grouping,...
            </summary>
        </member>
        <member name="T:fyiReporting.RDL.PageFooter">
            <summary>
             Defines the page footer of the report
            </summary>
        </member>
        <member name="T:fyiReporting.RDL.PageHeader">
            <summary>
             Defines the page header of the report
            </summary>
        </member>
        <member name="T:fyiReporting.RDL.ParameterValue">
            <summary>
             The value of a report paramenter.
            </summary>
        </member>
        <member name="T:fyiReporting.RDL.ParameterValues">
            <summary>
             Collection of parameter values.
            </summary>
        </member>
        <member name="T:fyiReporting.RDL.PlotArea">
            <summary>
             Chart plot area style.
            </summary>
        </member>
        <member name="T:fyiReporting.RDL.Query">
            <summary>
             Query representation against a data source.  Holds the data at runtime.
            </summary>
        </member>
        <member name="T:fyiReporting.RDL.QueryColumn">
            <summary>
             When Query is database SQL; QueryColumn represents actual database column.
            </summary>
        </member>
        <member name="T:fyiReporting.RDL.QueryCommandTypeEnum">
            <summary>
             Three value state; true, false, auto (dependent on context)
            </summary>
        </member>
        <member name="T:fyiReporting.RDL.QueryParameter">
            <summary>
             Represent query parameter.
            </summary>
        </member>
        <member name="T:fyiReporting.RDL.QueryParameters">
            <summary>
             Collection of query parameters.
            </summary>
        </member>
        <member name="T:fyiReporting.RDL.RDLParser">
            <summary>
            The RDLParser class takes an XML representation (either string or DOM) of a
            RDL file and compiles a Report.
            </summary>
        </member>
        <member name="F:fyiReporting.RDL.RDLParser.OnSubReportGetContent">
            <summary>
            EBN 31/03/2014
            Cross-Object parameters
            The SubReportGetContent delegate handles a callback to get the content of a subreport from another source (server, memory, database, ...)
            </summary>
            <param name="SubReportName"></param>
            <returns></returns>
        </member>
        <member name="M:fyiReporting.RDL.RDLParser.#ctor(System.String)">
            <summary>
            RDLParser takes in an RDL XML file and creates the
            definition that will be used at runtime.  It validates
            that the syntax is correct according to the specification.
            </summary>
        </member>
        <member name="M:fyiReporting.RDL.RDLParser.#ctor(System.Xml.XmlDocument)">
            <summary>
            RDLParser takes in an RDL XmlDocument and creates the
            definition that will be used at runtime.  It validates
            that the syntax is correct according to the specification.
            </summary>		
        </member>
        <member name="M:fyiReporting.RDL.RDLParser.Parse">
            <summary>
            Returns a parsed RPL report instance.
            </summary>
            
            <returns>A Report instance.</returns>
        </member>
        <member name="P:fyiReporting.RDL.RDLParser.Report">
            <summary>
            Get the compiled report.
            </summary>
        </member>
        <member name="P:fyiReporting.RDL.RDLParser.DataSourceReferencePassword">
            <summary>
            For shared data sources, the DataSourceReferencePassword is the user phrase
            used to decrypt the report.
            </summary>
        </member>
        <member name="P:fyiReporting.RDL.RDLParser.Folder">
            <summary>
            Folder is the location of the report.
            </summary>
        </member>
        <member name="P:fyiReporting.RDL.RDLParser.OverwriteConnectionString">
            <summary>
            ConnectionString to overwrite
            </summary>
        </member>
        <member name="P:fyiReporting.RDL.RDLParser.OverwriteInSubreport">
            <summary>
            overwrite ConnectionString in subreport
            </summary>
        </member>
        <member name="T:fyiReporting.RDL.ReportClass">
            <summary>
             ReportClass represents the Class report element. 
            </summary>
        </member>
        <member name="T:fyiReporting.RDL.NeedPassword">
            <summary>
            Delegate used to ask for a Data Source Reference password used to decrypt the file.
            </summary>
        </member>
        <member name="T:fyiReporting.RDL.ReportDefn">
            <summary>
             Main Report definition; this is the top of the tree that contains the complete
             definition of a instance of a report.
            </summary>
        </member>
        <member name="F:fyiReporting.RDL.ReportDefn._SubReportGetContent">
            <summary>
            EBN 31/03/2014
            Cross object
            </summary>
        </member>
        <member name="T:fyiReporting.RDL.ReportItems">
            <summary>
             Collection of specific reportitems (e.g. TextBoxs, Images, ...)
            </summary>
        </member>
        <member name="T:fyiReporting.RDL.ReportLog">
            <summary>
             Error logging (parse and runtime) within report.
            </summary>
        </member>
        <member name="T:fyiReporting.RDL.ReportParameter">
            <summary>
             Represent a report parameter (name, default value, runtime value,
            </summary>
        </member>
        <member name="T:fyiReporting.RDL.UserReportParameter">
            <summary>
            Public class used to pass user provided report parameters.
            </summary>
        </member>
        <member name="M:fyiReporting.RDL.UserReportParameter.GetDataValueFromDisplay(System.Object)">
            <summary>
            Obtain the data value from a (potentially) display value
            </summary>
            <param name="dvalue">Display value</param>
            <returns>The data value cooresponding to the display value.</returns>
        </member>
        <member name="M:fyiReporting.RDL.UserReportParameter.ParseValue(System.String)">
            <summary>
            Take a string and parse it into multiple values
            </summary>
            <param name="v"></param>
            <returns></returns>
        </member>
        <member name="P:fyiReporting.RDL.UserReportParameter.Name">
            <summary>
            Name of the report paramenter.
            </summary>
        </member>
        <member name="P:fyiReporting.RDL.UserReportParameter.dt">
            <summary>
            Type of the report parameter.
            </summary>
        </member>
        <member name="P:fyiReporting.RDL.UserReportParameter.Nullable">
            <summary>
            Is parameter allowed to be null.
            </summary>
        </member>
        <member name="P:fyiReporting.RDL.UserReportParameter.DefaultValue">
            <summary>
            Default value(s) of the parameter.
            </summary>
        </member>
        <member name="P:fyiReporting.RDL.UserReportParameter.AllowBlank">
            <summary>
            Is parameter allowed to be the empty string?
            </summary>
        </member>
        <member name="P:fyiReporting.RDL.UserReportParameter.MultiValue">
            <summary>
            Does parameters accept multiple values?
            </summary>
        </member>
        <member name="P:fyiReporting.RDL.UserReportParameter.Prompt">
            <summary>
            Text used to prompt for the parameter.
            </summary>
        </member>
        <member name="P:fyiReporting.RDL.UserReportParameter.DisplayValues">
            <summary>
            The display values for the parameter.  These may differ from the data values.
            </summary>
        </member>
        <member name="P:fyiReporting.RDL.UserReportParameter.DataValues">
            <summary>
            The data values of the parameter.
            </summary>
        </member>
        <member name="P:fyiReporting.RDL.UserReportParameter.Value">
            <summary>
            The runtime value of the parameter.
            </summary>
        </member>
        <member name="P:fyiReporting.RDL.UserReportParameter.Values">
            <summary>
            The runtime values of the parameter when MultiValue.
            </summary>
        </member>
        <member name="T:fyiReporting.RDL.ReportParameters">
            <summary>
             Collection of report parameters.
            </summary>
        </member>
        <member name="T:fyiReporting.RDL.Row">
            <summary>
             A Row in a data set.
            </summary>
        </member>
        <member name="T:fyiReporting.RDL.RowGrouping">
            <summary>
             Matrix row grouping definition.
            </summary>
        </member>
        <member name="T:fyiReporting.RDL.RowGroupings">
            <summary>
             Collection of row groupings.
            </summary>
        </member>
        <member name="T:fyiReporting.RDL.Rows">
            <summary>
             A collection of rows.
            </summary>
        </member>
        <member name="T:fyiReporting.RDL.RSize">
            <summary>
             The Size definition.  Held in a normalized format but convertible to multiple measurements.
            </summary>
        </member>
        <member name="M:fyiReporting.RDL.RSize.ToPixels(System.Decimal)">
            <summary>
            Converts the size into pixels.
            </summary>
            <param name="dpi">The dpi to be used in the convertion.</param>
            <returns>An int containing the size in pixels.</returns>
        </member>
        <member name="M:fyiReporting.RDL.RSize.ToPixels(System.Int32,System.Decimal)">
            <summary>
            Converts the size into pixels.
            </summary>
            <param name="size">The size to be converted.</param>
            <param name="dpi">The dpi to use in the convertion.</param>
            <returns>An int containing the size in pixels based on the specified DPI.</returns>
        </member>
        <member name="P:fyiReporting.RDL.RSize.Twips">
            <summary>
            TWIPS is 1/20 th of the size in points
            </summary>
        </member>
        <member name="P:fyiReporting.RDL.RSize.CSS">
            <summary>
            The original size is "almost" compatible with CSS - except CSS doesn't allow blanks.
            </summary>
        </member>
        <member name="T:fyiReporting.RDL.SeriesGrouping">
            <summary>
             Chart Series grouping (both dynamic and static).
            </summary>
        </member>
        <member name="T:fyiReporting.RDL.SeriesGroupings">
            <summary>
             Collection of Chart series groupings.
            </summary>
        </member>
        <member name="T:fyiReporting.RDL.SortBy">
            <summary>
             A single sort expression and direction.
            </summary>
        </member>
        <member name="T:fyiReporting.RDL.SortDirectionEnum">
            <summary>
             Handle sort direction enumeration: ascending, descending.
            </summary>
        </member>
        <member name="T:fyiReporting.RDL.Sorting">
            <summary>
             Collection of sort bys.
            </summary>
        </member>
        <member name="T:fyiReporting.RDL.StaticCategories">
            <summary>
             Collection of Chart static categories.
            </summary>
        </member>
        <member name="T:fyiReporting.RDL.StaticColumn">
            <summary>
             Matrix static column definition.
            </summary>
        </member>
        <member name="T:fyiReporting.RDL.StaticColumns">
            <summary>
             Collection of matrix static columns.
            </summary>
        </member>
        <member name="T:fyiReporting.RDL.StaticMember">
            <summary>
             Chart static member.
            </summary>
        </member>
        <member name="T:fyiReporting.RDL.StaticRow">
            <summary>
             Matrix static row definition.
            </summary>
        </member>
        <member name="T:fyiReporting.RDL.StaticRows">
            <summary>
             Collection of matrix static rows.
            </summary>
        </member>
        <member name="T:fyiReporting.RDL.StaticSeries">
            <summary>
             Collection of chart static series.
            </summary>
        </member>
        <member name="T:fyiReporting.RDL.Style">
            <summary>
             Style (borders, fonts, background, padding, ...) of a ReportItem.
            </summary>
        </member>
        <member name="T:fyiReporting.RDL.StyleBackgroundImage">
            <summary>
             Represents the background image information in a Style.
            </summary>
        </member>
        <member name="T:fyiReporting.RDL.StyleBackgroundImageSourceEnum">
            <summary>
             Style Background image source enumeration
            </summary>
        </member>
        <member name="T:fyiReporting.RDL.StyleBorderColor">
            <summary>
             The style of the border colors.  Expressions for all sides as well as default expression.
            </summary>
        </member>
        <member name="T:fyiReporting.RDL.StyleBorderStyle">
            <summary>
             The type (dotted, solid, ...) of border.  Expressions for all sides as well as default expression.
            </summary>
        </member>
        <member name="T:fyiReporting.RDL.BorderStyleEnum">
            <summary>
            Allowed values for border styles.  Note: these may not be actually supported depending
            on the renderer used.
            </summary>
        </member>
        <member name="F:fyiReporting.RDL.BorderStyleEnum.None">
            <summary>
            No border
            </summary>
        </member>
        <member name="F:fyiReporting.RDL.BorderStyleEnum.Dotted">
            <summary>
            Dotted line border
            </summary>
        </member>
        <member name="F:fyiReporting.RDL.BorderStyleEnum.Dashed">
            <summary>
            Dashed lin border
            </summary>
        </member>
        <member name="F:fyiReporting.RDL.BorderStyleEnum.Solid">
            <summary>
            Solid line border
            </summary>
        </member>
        <member name="F:fyiReporting.RDL.BorderStyleEnum.Double">
            <summary>
            Double line border
            </summary>
        </member>
        <member name="F:fyiReporting.RDL.BorderStyleEnum.Groove">
            <summary>
            Grooved border
            </summary>
        </member>
        <member name="F:fyiReporting.RDL.BorderStyleEnum.Ridge">
            <summary>
            Ridge border
            </summary>
        </member>
        <member name="F:fyiReporting.RDL.BorderStyleEnum.Inset">
            <summary>
            Inset border
            </summary>
        </member>
        <member name="F:fyiReporting.RDL.BorderStyleEnum.WindowInset">
            <summary>
            Windows Inset border
            </summary>
        </member>
        <member name="F:fyiReporting.RDL.BorderStyleEnum.Outset">
            <summary>
            Outset border
            </summary>
        </member>
        <member name="T:fyiReporting.RDL.StyleBorderWidth">
            <summary>
             The width of the border.  Expressions for all sides as well as default expression.
            </summary>
        </member>
        <member name="T:fyiReporting.RDL.Subreport">
            <summary>
             The definition of a Subreport (report name, parameters, ...).
            </summary>
        </member>
        <member name="T:fyiReporting.RDL.SubreportParameter">
            <summary>
             A parameter for a subreport.
            </summary>
        </member>
        <member name="T:fyiReporting.RDL.SubReportParameters">
            <summary>
             The collection of parameters for a subreport.
            </summary>
        </member>
        <member name="T:fyiReporting.RDL.Subtotal">
            <summary>
             Definition of a subtotal column or row.
            </summary>
        </member>
        <member name="T:fyiReporting.RDL.SubtotalPositionEnum">
            <summary>
             Handle the matrix subtotal position: before, after
            </summary>
        </member>
        <member name="T:fyiReporting.RDL.Table">
            <summary>
             Table definition and processing.  Inherits from DataRegion which inherits from ReportItem.
            </summary>
        </member>
        <member name="T:fyiReporting.RDL.TableCell">
            <summary>
             TableCell definition and processing.
            </summary>
        </member>
        <member name="T:fyiReporting.RDL.TableCells">
            <summary>
             TableCells definition and processing.
            </summary>
        </member>
        <member name="T:fyiReporting.RDL.TableColumn">
            <summary>
             TableColumn definition and processing.
            </summary>
        </member>
        <member name="T:fyiReporting.RDL.TableColumns">
            <summary>
             TableColumns definition and processing.
            </summary>
        </member>
        <member name="T:fyiReporting.RDL.TableGroup">
            <summary>
             TableGroup definition and processing.
            </summary>
        </member>
        <member name="T:fyiReporting.RDL.TableGroups">
            <summary>
             TableGroups definition and processing.
            </summary>
        </member>
        <member name="T:fyiReporting.RDL.TableRow">
            <summary>
             TableRow represents a Row in a table.  This can be part of a header, footer, or detail definition.
            </summary>
        </member>
        <member name="T:fyiReporting.RDL.TableRows">
            <summary>
             TableRows definition and processing.
            </summary>
        </member>
        <member name="T:fyiReporting.RDL.Textbox">
            <summary>
             The Textbox definition.  Inherits from ReportItem.
            </summary>
        </member>
        <member name="T:fyiReporting.RDL.ThreeDProperties">
            <summary>
             ThreeDProperties definition and processing.
            </summary>
        </member>
        <member name="T:fyiReporting.RDL.Title">
            <summary>
             Chart (or axis) title definition.
            </summary>
        </member>
        <member name="T:fyiReporting.RDL.TitlePositionEnum">
            <summary>
             Handle title position enumeration: center, near, far.
            </summary>
        </member>
        <member name="T:fyiReporting.RDL.ToggleImage">
            <summary>
             Toggle image definition.
            </summary>
        </member>
        <member name="T:fyiReporting.RDL.TrueFalseAutoEnum">
            <summary>
             Three value state; true, false, auto (dependent on context)
            </summary>
        </member>
        <member name="T:fyiReporting.RDL.ValidValues">
            <summary>
             Query to execute for valid values of a parameter.
            </summary>
        </member>
        <member name="T:fyiReporting.RDL.ValueAxis">
            <summary>
             Chart value axis definition.
            </summary>
        </member>
        <member name="T:fyiReporting.RDL.Values">
            <summary>
             Ordered list of values used as a default for a parameter
            </summary>
        </member>
        <member name="T:fyiReporting.RDL.Visibility">
            <summary>
             Visibility definition and processing.
            </summary>
        </member>
        <member name="T:fyiReporting.RDL.FunctionPlusInt32">
            <summary>
            Plus operator  of form lhs + rhs where both operands are decimal
            </summary>
        </member>
        <member name="T:fyiReporting.RDL.FunctionBinary">
            <summary>
            Binary operator
            </summary>
        </member>
        <member name="M:fyiReporting.RDL.FunctionBinary.#ctor">
            <summary>
            Arbitrary binary operater; might be a
            </summary>
        </member>
        <member name="M:fyiReporting.RDL.FunctionPlusInt32.#ctor">
            <summary>
            Do plus on decimal data types
            </summary>
        </member>
        <member name="T:fyiReporting.RDL.FunctionMinusInt32">
            <summary>
            Minus operator  of form lhs - rhs where both operands are decimal.
            </summary>
        </member>
        <member name="M:fyiReporting.RDL.FunctionMinusInt32.#ctor">
            <summary>
            Do minus on decimal data types
            </summary>
        </member>
        <member name="T:fyiReporting.RDL.FunctionAggrArray">
            <summary>
            Aggregate function: Count
            </summary>
        </member>
        <member name="T:fyiReporting.RDL.FunctionAggr">
            <summary>
            Base class for all aggregate functions
            </summary>
        </member>
        <member name="M:fyiReporting.RDL.FunctionAggr.#ctor(fyiReporting.RDL.IExpr,System.Object)">
            <summary>
            Base class of all aggregate functions
            </summary>
        </member>
        <member name="M:fyiReporting.RDL.FunctionAggrArray.#ctor(System.Collections.Generic.List{fyiReporting.RDL.ICacheData},fyiReporting.RDL.IExpr,System.Object)">
            <summary>
            Aggregate function: Count
            
            Return type is double
            </summary>
        </member>
        <member name="T:fyiReporting.RDL.RenderBase">
            <summary>
             Renders a report to PDF.   This is a page oriented formatting renderer.
            </summary>
        </member>
        <member name="T:fyiReporting.RDL.IPresent">
            <summary>
            Presentation: generation of presentation; e.g. html, pdf, xml, ...
            </summary>
        </member>
        <member name="M:fyiReporting.RDL.RenderBase.CreateDocument">
            <summary>
            Page line element at the X Y to X2 Y2 position
            </summary>
            <returns></returns>
        </member>
        <member name="M:fyiReporting.RDL.RenderBase.AddImage(System.String,fyiReporting.RDL.StyleInfo,System.Drawing.Imaging.ImageFormat,System.Single,System.Single,System.Single,System.Single,System.Drawing.RectangleF,System.Byte[],System.Int32,System.Int32,System.String,System.String)">
            <summary>
            Add image to the page.
            </summary>
            <returns>string Image name</returns>
        </member>
        <member name="M:fyiReporting.RDL.RenderBase.AddPolygon(System.Drawing.PointF[],fyiReporting.RDL.StyleInfo,System.String)">
            <summary>
            Page Polygon
            </summary>
            <param name="pts"></param>
            <param name="si"></param>
            <param name="url"></param>
            <param name="patterns"></param>
        </member>
        <member name="M:fyiReporting.RDL.RenderBase.AddRectangle(System.Single,System.Single,System.Single,System.Single,fyiReporting.RDL.StyleInfo,System.String,System.String)">
            <summary>
            Page Rectangle element at the X Y position
            </summary>
            <returns></returns>
        </member>
        <member name="M:fyiReporting.RDL.RenderBase.AddPie(System.Single,System.Single,System.Single,System.Single,fyiReporting.RDL.StyleInfo,System.String,System.String)">
            <summary>
            Draw a pie
            </summary>
            <returns></returns>
        </member>
        <member name="M:fyiReporting.RDL.RenderBase.AddCurve(System.Drawing.PointF[],fyiReporting.RDL.StyleInfo)">
            <summary>
            Draw a curve
            </summary>
            <returns></returns>
        </member>
        <member name="M:fyiReporting.RDL.RenderBase.AddText(System.Single,System.Single,System.Single,System.Single,System.String[],fyiReporting.RDL.StyleInfo,System.Single[],System.Boolean,System.String,System.Boolean,System.String)">
            <summary>
            Page Text element at the X Y position; multiple lines handled
            </summary>
            <returns></returns>
        </member>
        <member name="M:fyiReporting.RDL.RenderBase.MeasureString(System.String,System.Drawing.Graphics,System.Drawing.Font,System.Drawing.StringFormat,System.Drawing.CharacterRange[])">
            <summary>
            Measures the location of an arbritrary # of words within a string
            </summary>
        </member>
        <member name="M:fyiReporting.RDL.RenderBase.MeasureString32(System.String,System.Drawing.Graphics,System.Drawing.Font,System.Drawing.StringFormat,System.Drawing.CharacterRange[])">
            <summary>
            Measures the location of words within a string;  limited by .Net 1.1 to 32 words
             MEASUREMAX is a constant that defines that limit
            </summary>
            <param name="s"></param>
            <param name="g"></param>
            <param name="drawFont"></param>
            <param name="drawFormat"></param>
            <param name="cra"></param>
            <returns></returns>
        </member>
        <member name="T:fyiReporting.RDL.RenderPdf_iTextSharp">
            <summary>
             Renders a report to PDF.   This is a page oriented formatting renderer.
            </summary>
        </member>
        <member name="F:fyiReporting.RDL.RenderPdf_iTextSharp._baseFonts">
            <summary>
            List itextSharp Basefont added
            </summary>
        </member>
        <member name="F:fyiReporting.RDL.RenderPdf_iTextSharp._baseFontsName">
            <summary>
            List font name
            </summary>
        </member>
        <member name="M:fyiReporting.RDL.RenderPdf_iTextSharp.iFontNameNormalize(System.String)">
            <summary>
            Font name , for my application almost fonts  will be unicode and embedded
            </summary>
            <returns></returns>
        </member>
        <member name="M:fyiReporting.RDL.RenderPdf_iTextSharp.iAddFillRect(System.Single,System.Single,System.Single,System.Single,System.Drawing.Color)">
            <summary>
            Add a filled rectangle
            </summary>
            <returns></returns>
        </member>
        <member name="M:fyiReporting.RDL.RenderPdf_iTextSharp.iAddBorder(fyiReporting.RDL.StyleInfo,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Add border
            </summary>
        </member>
        <member name="P:fyiReporting.RDL.RenderPdf_iTextSharp.FontFolder">
            <summary> 
            Default I get embedded fonts in Fonts folder in current 
            folder RdlEngine.dll in, can set font folder here 
            </summary> 
        </member>
        <member name="T:RdlEngine.Resources.Strings">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:RdlEngine.Resources.Strings.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:RdlEngine.Resources.Strings.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:RdlEngine.Resources.Strings.CharReader_Error_FileReaderUnGetFirstChar">
            <summary>
              Looks up a localized string similar to error : FileReader.UnGet : ungetted first char.
            </summary>
        </member>
        <member name="P:RdlEngine.Resources.Strings.ChartLayout_Error_PlotAreaHeightIs0">
            <summary>
              Looks up a localized string similar to Plot area height is less than or equal to 0.
            </summary>
        </member>
        <member name="P:RdlEngine.Resources.Strings.ChartLayout_Error_PlotAreaWidthIs0">
            <summary>
              Looks up a localized string similar to Plot area width is less than or equal to 0.
            </summary>
        </member>
        <member name="P:RdlEngine.Resources.Strings.DataSourceDefn_Error_NoPasswordForDSR">
            <summary>
              Looks up a localized string similar to No password provided for shared DataSource reference.
            </summary>
        </member>
        <member name="P:RdlEngine.Resources.Strings.Filter_Error_TopNAndBottomNRequireInt">
            <summary>
              Looks up a localized string similar to Filter operators TopN and BottomN require an integer value got {0}..
            </summary>
        </member>
        <member name="P:RdlEngine.Resources.Strings.Financial_Error_IPmtNotSupportPayments">
            <summary>
              Looks up a localized string similar to IPmt doesn&apos;t support payments due at beginning of period..
            </summary>
        </member>
        <member name="P:RdlEngine.Resources.Strings.FunctionCode_Error_MethodNotFound">
            <summary>
              Looks up a localized string similar to {0} method not found in code.
            </summary>
        </member>
        <member name="P:RdlEngine.Resources.Strings.FunctionCustomInstance_Error_MethodNotFoundInClass">
            <summary>
              Looks up a localized string similar to {0} method not found in class {1}.
            </summary>
        </member>
        <member name="P:RdlEngine.Resources.Strings.FunctionCustomStatic_Error_MethodNotFoundInClass">
            <summary>
              Looks up a localized string similar to {0} method not found in class {1}.
            </summary>
        </member>
        <member name="P:RdlEngine.Resources.Strings.FunctionFieldCollection_Error_FieldCollectionInvalid">
            <summary>
              Looks up a localized string similar to Field collection argument {0} is invalid.
            </summary>
        </member>
        <member name="P:RdlEngine.Resources.Strings.FunctionFieldCollection_Error_FieldCollectionNull">
            <summary>
              Looks up a localized string similar to Field collection argument is null.
            </summary>
        </member>
        <member name="P:RdlEngine.Resources.Strings.FunctionGlobalCollection_Error_GlobalsNull">
            <summary>
              Looks up a localized string similar to Globals collection argument is null.
            </summary>
        </member>
        <member name="P:RdlEngine.Resources.Strings.FunctionGlobalCollection_Error_GlobalsUnknown">
            <summary>
              Looks up a localized string similar to Globals collection argument &apos;{0}&apos; is unknown..
            </summary>
        </member>
        <member name="P:RdlEngine.Resources.Strings.FunctionParameterCollection_Error_ParameterCollectionInvalid">
            <summary>
              Looks up a localized string similar to Parameter collection argument {0} is invalid.
            </summary>
        </member>
        <member name="P:RdlEngine.Resources.Strings.FunctionParameterCollection_Error_ParameterCollectionNull">
            <summary>
              Looks up a localized string similar to Parameter collection argument is null.
            </summary>
        </member>
        <member name="P:RdlEngine.Resources.Strings.FunctionReportItemCollection_Error_ReportItemCollectionInvalid">
            <summary>
              Looks up a localized string similar to ReportItem collection argument {0} is invalid.
            </summary>
        </member>
        <member name="P:RdlEngine.Resources.Strings.FunctionReportItemCollection_Error_ReportItemCollectionNull">
            <summary>
              Looks up a localized string similar to ReportItem collection argument is null.
            </summary>
        </member>
        <member name="P:RdlEngine.Resources.Strings.FunctionReportParameter_Error_UnknownReporParameterMethod">
            <summary>
              Looks up a localized string similar to Internal error: unknown Report Parameter method.
            </summary>
        </member>
        <member name="P:RdlEngine.Resources.Strings.FunctionSystem_Error_MethodNotFound">
            <summary>
              Looks up a localized string similar to {0} method not found in class {1}.
            </summary>
        </member>
        <member name="P:RdlEngine.Resources.Strings.FunctionUserCollection_Error_UserCollectionInvalid">
            <summary>
              Looks up a localized string similar to User collection argument {0} is invalid..
            </summary>
        </member>
        <member name="P:RdlEngine.Resources.Strings.FunctionUserCollection_Error_UserCollectionNull">
            <summary>
              Looks up a localized string similar to User collection argument is null.
            </summary>
        </member>
        <member name="P:RdlEngine.Resources.Strings.FunctionUserLanguage_Error_ConvertToBoolean">
            <summary>
              Looks up a localized string similar to Invalid conversion from Language to boolean..
            </summary>
        </member>
        <member name="P:RdlEngine.Resources.Strings.FunctionUserLanguage_Error_ConvertToDateTime">
            <summary>
              Looks up a localized string similar to Invalid conversion from Language to DateTime..
            </summary>
        </member>
        <member name="P:RdlEngine.Resources.Strings.FunctionUserLanguage_Error_ConvertToDecimal">
            <summary>
              Looks up a localized string similar to Invalid conversion from Language to Decimal..
            </summary>
        </member>
        <member name="P:RdlEngine.Resources.Strings.FunctionUserLanguage_Error_ConvertToDouble">
            <summary>
              Looks up a localized string similar to Invalid conversion from Language to double..
            </summary>
        </member>
        <member name="P:RdlEngine.Resources.Strings.FunctionUserLanguage_Error_ConvertToInt32">
            <summary>
              Looks up a localized string similar to Invalid conversion from Language to Int32..
            </summary>
        </member>
        <member name="P:RdlEngine.Resources.Strings.Lexer_Error_SeparatorMustFollowedNumber">
            <summary>
              Looks up a localized string similar to &apos;{0}&apos; should be followed by a number.
            </summary>
        </member>
        <member name="P:RdlEngine.Resources.Strings.Lexer_Error_UnterminatedComment">
            <summary>
              Looks up a localized string similar to Unterminated comment!.
            </summary>
        </member>
        <member name="P:RdlEngine.Resources.Strings.Lexer_ErrorP_InvalidNumberConstant">
            <summary>
              Looks up a localized string similar to Invalid number constant..
            </summary>
        </member>
        <member name="P:RdlEngine.Resources.Strings.Lexer_ErrorP_UnterminatedString">
            <summary>
              Looks up a localized string similar to Unterminated string!.
            </summary>
        </member>
        <member name="P:RdlEngine.Resources.Strings.MhtBuilder_Error_Extension">
            <summary>
              Looks up a localized string similar to The extension of the filename provided + &apos;{0}&apos;, does not have the expected extension(s) &apos;{1}&apos;.
            </summary>
        </member>
        <member name="P:RdlEngine.Resources.Strings.MhtBuilder_Error_FilenameNoExtension">
            <summary>
              Looks up a localized string similar to The filename provided, &apos;{0}&apos;, has no extension. If are specifying a folder, make sure it ends in a trailing slash. The expected file extension(s) are &apos;{1}&apos;.
            </summary>
        </member>
        <member name="P:RdlEngine.Resources.Strings.MhtBuilder_Error_UnableDownload">
            <summary>
              Looks up a localized string similar to unable to download &apos;{0}&apos;: {1}.
            </summary>
        </member>
        <member name="P:RdlEngine.Resources.Strings.MhtWebFile_Error_ConvertOnlyHTMLOrCSS">
            <summary>
              Looks up a localized string similar to Converting references only makes sense for HTML or CSS files; this file is of type &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:RdlEngine.Resources.Strings.MhtWebFile_Error_NoFilename">
            <summary>
              Looks up a localized string similar to No filename was provided, and the HTML title tag was not found, so a filename could not be automatically generated. You&apos;ll need to provide a filename and not a folder..
            </summary>
        </member>
        <member name="P:RdlEngine.Resources.Strings.OneFileStreamGen_Error_FileAlreadyExists">
            <summary>
              Looks up a localized string similar to File {0} already exists..
            </summary>
        </member>
        <member name="P:RdlEngine.Resources.Strings.Pages_Error_CurrentPageMustInList">
            <summary>
              Looks up a localized string similar to CurrentPage must be in the list of pages.
            </summary>
        </member>
        <member name="P:RdlEngine.Resources.Strings.PageTextHtml_Error_BuildMethodMustCalledPriorTotalHeight">
            <summary>
              Looks up a localized string similar to Build method must be called prior to referencing TotalHeight..
            </summary>
        </member>
        <member name="P:RdlEngine.Resources.Strings.Parser_ErrorP_AggregateCannotNestedInAnotherAggregate">
            <summary>
              Looks up a localized string similar to Aggregate function &apos;{0}&apos; cannot be nested in another aggregate function..
            </summary>
        </member>
        <member name="P:RdlEngine.Resources.Strings.Parser_ErrorP_AggregateCannotUsedWithinGrouping">
            <summary>
              Looks up a localized string similar to Aggregate function &apos;{0}&apos; cannot be used within a Grouping expression..
            </summary>
        </member>
        <member name="P:RdlEngine.Resources.Strings.Parser_ErrorP_AggregateMust1Argument">
            <summary>
              Looks up a localized string similar to Aggregate function must have at least one argument..
            </summary>
        </member>
        <member name="P:RdlEngine.Resources.Strings.Parser_ErrorP_AND_OR_RequiresBoolean">
            <summary>
              Looks up a localized string similar to AND/OR operations require both sides to be boolean expressions..
            </summary>
        </member>
        <member name="P:RdlEngine.Resources.Strings.Parser_ErrorP_AtColumn">
            <summary>
              Looks up a localized string similar to   At column {0}.
            </summary>
        </member>
        <member name="P:RdlEngine.Resources.Strings.Parser_ErrorP_BracketExpected">
            <summary>
              Looks up a localized string similar to &apos;)&apos; expected but not found..
            </summary>
        </member>
        <member name="P:RdlEngine.Resources.Strings.Parser_ErrorP_ChooseFirstArgumentMustNumeric">
            <summary>
              Looks up a localized string similar to First argument to Choose function must be numeric..
            </summary>
        </member>
        <member name="P:RdlEngine.Resources.Strings.Parser_ErrorP_ChooseRequires2Arguments">
            <summary>
              Looks up a localized string similar to Choose function requires at least 2 arguments..
            </summary>
        </member>
        <member name="P:RdlEngine.Resources.Strings.Parser_ErrorP_ClassUnknown">
            <summary>
              Looks up a localized string similar to Class {0} is not known..
            </summary>
        </member>
        <member name="P:RdlEngine.Resources.Strings.Parser_ErrorP_EndExpressionExpected">
            <summary>
              Looks up a localized string similar to End of expression expected..
            </summary>
        </member>
        <member name="P:RdlEngine.Resources.Strings.Parser_ErrorP_ExpectingComma">
            <summary>
              Looks up a localized string similar to Expecting &apos;,&apos; or &apos;)&apos;..
            </summary>
        </member>
        <member name="P:RdlEngine.Resources.Strings.Parser_ErrorP_FieldNotFound">
            <summary>
              Looks up a localized string similar to Field &apos;{0}&apos;  not found..
            </summary>
        </member>
        <member name="P:RdlEngine.Resources.Strings.Parser_ErrorP_FieldNotInDataSet">
            <summary>
              Looks up a localized string similar to Field &apos;{0}&apos; is not in DataSet {1}..
            </summary>
        </member>
        <member name="P:RdlEngine.Resources.Strings.Parser_ErrorP_FieldsRequires1Argument">
            <summary>
              Looks up a localized string similar to Fields collection requires exactly 1 argument..
            </summary>
        </member>
        <member name="P:RdlEngine.Resources.Strings.Parser_ErrorP_FieldSupportsValueAndIsMissing">
            <summary>
              Looks up a localized string similar to Field &apos;{0}&apos;  only supports &apos;Value&apos; and &apos;IsMissing&apos; properties..
            </summary>
        </member>
        <member name="P:RdlEngine.Resources.Strings.Parser_ErrorP_FormatRequires2Arguments">
            <summary>
              Looks up a localized string similar to Format function requires 2 arguments..
            </summary>
        </member>
        <member name="P:RdlEngine.Resources.Strings.Parser_ErrorP_FoundValue">
            <summary>
              Looks up a localized string similar to   Found &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:RdlEngine.Resources.Strings.Parser_ErrorP_FunctionOfClassUnknown">
            <summary>
              Looks up a localized string similar to Function &apos;{0}&apos; of class &apos;{1}&apos; is not known..
            </summary>
        </member>
        <member name="P:RdlEngine.Resources.Strings.Parser_ErrorP_FunctionUnknown">
            <summary>
              Looks up a localized string similar to Function {0} is not known..
            </summary>
        </member>
        <member name="P:RdlEngine.Resources.Strings.Parser_ErrorP_GlobalsNotFound">
            <summary>
              Looks up a localized string similar to Globals &apos;{0}&apos;  not found..
            </summary>
        </member>
        <member name="P:RdlEngine.Resources.Strings.Parser_ErrorP_GlobalsRequires1Argument">
            <summary>
              Looks up a localized string similar to Globals collection requires exactly 1 argument..
            </summary>
        </member>
        <member name="P:RdlEngine.Resources.Strings.Parser_ErrorP_IdentifierExpected">
            <summary>
              Looks up a localized string similar to Constant or Identifier expected but not found..
            </summary>
        </member>
        <member name="P:RdlEngine.Resources.Strings.Parser_ErrorP_iff_function_requires_3_arguments">
            <summary>
              Looks up a localized string similar to iff function requires 3 arguments..
            </summary>
        </member>
        <member name="P:RdlEngine.Resources.Strings.Parser_ErrorP_Invalid_function_arguments">
            <summary>
              Looks up a localized string similar to Invalid function arguments..
            </summary>
        </member>
        <member name="P:RdlEngine.Resources.Strings.Parser_ErrorP_ItemNotFound">
            <summary>
              Looks up a localized string similar to ReportItem &apos;{0}&apos;  not found..
            </summary>
        </member>
        <member name="P:RdlEngine.Resources.Strings.Parser_ErrorP_ItemSupportsValue">
            <summary>
              Looks up a localized string similar to ReportItem &apos;{0}&apos;  only supports &apos;Value&apos; property..
            </summary>
        </member>
        <member name="P:RdlEngine.Resources.Strings.Parser_ErrorP_MinusNeedNumbers">
            <summary>
              Looks up a localized string similar to &apos;-&apos; operator works only on numbers..
            </summary>
        </member>
        <member name="P:RdlEngine.Resources.Strings.Parser_ErrorP_NoScope4Aggregate">
            <summary>
              Looks up a localized string similar to No scope provided for aggregate function &apos;{0}&apos; but more than one DataSet defined..
            </summary>
        </member>
        <member name="P:RdlEngine.Resources.Strings.Parser_ErrorP_NotCodeMethod">
            <summary>
              Looks up a localized string similar to {0} is not a Code method.  Verify the name of the method and its arguments match an existing code function..
            </summary>
        </member>
        <member name="P:RdlEngine.Resources.Strings.Parser_ErrorP_NOTRequiresBoolean">
            <summary>
              Looks up a localized string similar to NOT requires boolean expression..
            </summary>
        </member>
        <member name="P:RdlEngine.Resources.Strings.Parser_ErrorP_ParameterNotFound">
            <summary>
              Looks up a localized string similar to Report parameter &apos;{0}&apos;  not found..
            </summary>
        </member>
        <member name="P:RdlEngine.Resources.Strings.Parser_ErrorP_ParametersRequires1Argument">
            <summary>
              Looks up a localized string similar to Parameters collection requires exactly 1 argument..
            </summary>
        </member>
        <member name="P:RdlEngine.Resources.Strings.Parser_ErrorP_ParameterSupportsValueAndLabel">
            <summary>
              Looks up a localized string similar to Parameter &apos;{0}&apos;  only supports &apos;Value&apos; and &apos;Label&apos; properties..
            </summary>
        </member>
        <member name="P:RdlEngine.Resources.Strings.Parser_ErrorP_ReportItemsRequires1Argument">
            <summary>
              Looks up a localized string similar to ReportItems collection requires exactly 1 argument..
            </summary>
        </member>
        <member name="P:RdlEngine.Resources.Strings.Parser_ErrorP_RunningValue_takes_2_or_3_arguments">
            <summary>
              Looks up a localized string similar to RunningValue takes 2 or 3 arguments..
            </summary>
        </member>
        <member name="P:RdlEngine.Resources.Strings.Parser_ErrorP_RunningValueArgumentInvalid">
            <summary>
              Looks up a localized string similar to RunningValue &apos;Function&apos; argument is invalid..
            </summary>
        </member>
        <member name="P:RdlEngine.Resources.Strings.Parser_ErrorP_RunningValueNotSupported">
            <summary>
              Looks up a localized string similar to RunningValue function &apos;{0}&apos; is not supported..
            </summary>
        </member>
        <member name="P:RdlEngine.Resources.Strings.Parser_ErrorP_ScopeIdentifer">
            <summary>
              Looks up a localized string similar to Illegal scope identifer specified..
            </summary>
        </member>
        <member name="P:RdlEngine.Resources.Strings.Parser_ErrorP_ScopeMustConstant">
            <summary>
              Looks up a localized string similar to {0} function&apos;s scope must be a constant..
            </summary>
        </member>
        <member name="P:RdlEngine.Resources.Strings.Parser_ErrorP_ScopeNotKnownDataSet">
            <summary>
              Looks up a localized string similar to Scope &apos;{0}&apos; does not reference a known DataSet..
            </summary>
        </member>
        <member name="P:RdlEngine.Resources.Strings.Parser_ErrorP_ScopeNotKnownGrouping">
            <summary>
              Looks up a localized string similar to Scope &apos;{0}&apos; is not a known Grouping, DataSet or DataRegion name..
            </summary>
        </member>
        <member name="P:RdlEngine.Resources.Strings.Parser_ErrorP_ScopeNotSpecifiedInHeaderOrFooter">
            <summary>
              Looks up a localized string similar to Scope &apos;{0}&apos; can&apos;t be specified in a Page Header or Footer expression..
            </summary>
        </member>
        <member name="P:RdlEngine.Resources.Strings.Parser_ErrorP_SecondMustString">
            <summary>
              Looks up a localized string similar to Second argument to Format function must be a string..
            </summary>
        </member>
        <member name="P:RdlEngine.Resources.Strings.Parser_ErrorP_SwitchMustBoolean">
            <summary>
              Looks up a localized string similar to Switch function must have a boolean expression every other argument..
            </summary>
        </member>
        <member name="P:RdlEngine.Resources.Strings.Parser_ErrorP_SwitchMustEvenArguments">
            <summary>
              Looks up a localized string similar to Switch function must have an even number of arguments..
            </summary>
        </member>
        <member name="P:RdlEngine.Resources.Strings.Parser_ErrorP_SwitchRequires2Arguments">
            <summary>
              Looks up a localized string similar to Switch function requires at least 2 arguments..
            </summary>
        </member>
        <member name="P:RdlEngine.Resources.Strings.Parser_ErrorP_UnknownIdentifer">
            <summary>
              Looks up a localized string similar to &apos;{0}&apos; is an unknown identifer..
            </summary>
        </member>
        <member name="P:RdlEngine.Resources.Strings.Parser_ErrorP_UnknownProperty">
            <summary>
              Looks up a localized string similar to {0} is not a known property for {1}..
            </summary>
        </member>
        <member name="P:RdlEngine.Resources.Strings.Parser_ErrorP_UserRequires1Argument">
            <summary>
              Looks up a localized string similar to User collection requires exactly 1 argument..
            </summary>
        </member>
        <member name="P:RdlEngine.Resources.Strings.Parser_ErrorP_UserVarNotFound">
            <summary>
              Looks up a localized string similar to User variable &apos;{0}&apos;  not found..
            </summary>
        </member>
        <member name="P:RdlEngine.Resources.Strings.PdfOutline_Error_GetObjectNumberMustBeforeGetOutlineDict">
            <summary>
              Looks up a localized string similar to GetObjectNumber must be called before GetOutlineDict.
            </summary>
        </member>
        <member name="P:RdlEngine.Resources.Strings.ProcessReport_Error_ReportHasErrors">
            <summary>
              Looks up a localized string similar to Report has errors.  Cannot be processed..
            </summary>
        </member>
        <member name="P:RdlEngine.Resources.Strings.Query_Error_XMLMustContainTopLevelRows">
            <summary>
              Looks up a localized string similar to Error: XML Data must contain top level rows..
            </summary>
        </member>
        <member name="P:RdlEngine.Resources.Strings.RdlEngineConfig_Error_CashModuleNotFound">
            <summary>
              Looks up a localized string similar to {0} could not be found.
            </summary>
        </member>
        <member name="P:RdlEngine.Resources.Strings.RdlEngineConfig_Error_CodeModuleNotLoaded">
            <summary>
              Looks up a localized string similar to {0} could not be loaded.
            </summary>
        </member>
        <member name="P:RdlEngine.Resources.Strings.RdlEngineConfig_Error_NotKnownCustomReportItemType">
            <summary>
              Looks up a localized string similar to {0} is not a known CustomReportItem type.
            </summary>
        </member>
        <member name="P:RdlEngine.Resources.Strings.RdlEngineConfig_Error_UnableCreateInstance">
            <summary>
              Looks up a localized string similar to Unable to create instance of &apos;{0}&apos; for provider &apos;{1}&apos;.
            </summary>
        </member>
        <member name="P:RdlEngine.Resources.Strings.RDLParser_ErrorP__NoReport">
            <summary>
              Looks up a localized string similar to Error: RDL doesn&apos;t contain a report element. .
            </summary>
        </member>
        <member name="P:RdlEngine.Resources.Strings.RDLParser_ErrorP_XMLFailed">
            <summary>
              Looks up a localized string similar to Error: XML failed .
            </summary>
        </member>
        <member name="P:RdlEngine.Resources.Strings.ReportLog_Error_Severity">
            <summary>
              Looks up a localized string similar to Severity.
            </summary>
        </member>
        <member name="P:RdlEngine.Resources.Strings.Subreport_Error_SubreportNotParameter">
            <summary>
              Looks up a localized string similar to Subreport {0} doesn&apos;t define parameter {1}..
            </summary>
        </member>
        <member name="P:RdlEngine.Resources.Strings.Table_Error_RecursiveGroupsMustOnlyGroupDefinition">
            <summary>
              Looks up a localized string similar to Error: Recursive groups must be the only group definition..
            </summary>
        </member>
        <member name="P:RdlEngine.Resources.Strings.TableRow_Error_TableRowNotRelatedToTable">
            <summary>
              Looks up a localized string similar to Internal error: TableRow not related to a Table.
            </summary>
        </member>
        <member name="P:RdlEngine.Resources.Strings.TableRows_Error_TableRowsMustOwnedTable">
            <summary>
              Looks up a localized string similar to Internal error.  TableRows must be owned eventually by a table..
            </summary>
        </member>
        <member name="M:fyiReporting.RDL.ExcelValet.SetCell(System.Int32,System.Int32,System.String,fyiReporting.RDL.StyleInfo)">
            <summary>
            Set the value of a cell
            </summary>
            <param name="row"></param>
            <param name="col"></param> 
            <param name="val"></param>
            <param name="si"></param>
            Row 0 is reserved to hold the column width
            Col 0 is reserved to hold the row height
        </member>
        <member name="T:fyiReporting.RDL.CellData">
            <summary>
            CellData represents the information in a cell.  It consists of the value and the style index.
            </summary>
        </member>
        <member name="T:fyiReporting.RDL.SheetInfo">
            <summary>
            SheetInfo holds information about the sheet; mainly the name, merged cells on the sheet and the data
            </summary>
        </member>
        <member name="T:fyiReporting.RDL.SparseMatrix">
            <summary>
            SparseMatrix is an implementation of a sparse matrix.  However, the implementation leans towards being
            a fairly dense grid where you don't need to know the row or column counts up front.
            </summary>
        </member>
        <member name="T:fyiReporting.RDL.PdfPattern">
             <summary>
            Represents the pattern dictionary used in a pdf page
             </summary>
             	
        </member>
        <member name="M:fyiReporting.RDL.PdfPattern.GetPatternDict(System.Int64,System.Int32@)">
            <summary>
            Gets the pattern entries to be written to the file
            </summary>
            <returns></returns>
        </member>
        <member name="T:fyiReporting.RDL.PdfBase">
            <summary>
            This is the base object for all objects used within the pdf.
            </summary>
        </member>
        <member name="F:fyiReporting.RDL.PdfBase.objectNum">
            <summary>
            Stores the Object Number
            </summary>
        </member>
        <member name="M:fyiReporting.RDL.PdfBase.#ctor(fyiReporting.RDL.PdfAnchor)">
            <summary>
            Constructor increments the object number to 
            reflect the currently used object number
            </summary>
        </member>
        <member name="M:fyiReporting.RDL.PdfBase.GetUTF8Bytes(System.String,System.Int64,System.Int32@)">
            <summary>
            Convert the unicode string 16 bits to unicode bytes. 
            This is written to the file to create Pdf 
            </summary>
            <returns></returns>
        </member>
        <member name="T:fyiReporting.RDL.PdfPatternEntry">
             <summary>
            Represents a pattern entry used in a pdf page
             </summary>
        </member>
        <member name="M:fyiReporting.RDL.PdfPatternEntry.#ctor(fyiReporting.RDL.PdfAnchor,System.String,System.String)">
            <summary>
            Create the font Dictionary
            </summary>
        </member>
        <member name="M:fyiReporting.RDL.PdfPatternEntry.GetPatternDict(System.Int64,System.Int32@)">
            <summary>
            Get the font entry to be written to the file
            </summary>
            <returns></returns>
        </member>
        <member name="T:fyiReporting.RDL.RenderExcel">
            <summary>
             Renders a report to HTML.   This handles some page formating but does not do true page formatting.
            </summary>
        </member>
        <member name="T:fyiReporting.RDL.TablePositioner">
            <summary>
             HTML Table for positioning report items
            </summary>
        </member>
        <member name="T:fyiReporting.RDL.RenderCsv">
            <summary>
            The primary class to "run" a report to XML
            </summary>
        </member>
        <member name="T:fyiReporting.RDL.RenderRtf">
            <summary>
             Renders a report to HTML.   This handles some page formating but does not do true page formatting.
            </summary>
        </member>
        <member name="M:fyiReporting.RDL.RenderRtf.PutImage(System.Drawing.Image,System.Int32,System.Int32)">
            <summary>
            Put an image stream out.   Use by Chart and Image
            </summary>
            <param name="ioin"></param>
            <param name="width"></param>
            <param name="height"></param>
        </member>
        <member name="T:fyiReporting.RDL.RenderTif">
            <summary> 
             Renders a report to TIF.   This is a page oriented formatting renderer. 
            </summary> 
        </member>
        <member name="P:fyiReporting.RDL.RenderTif.RenderColor">
            <summary>
            Set RenderColor to false if you want to create a fax compatible tiff in black and white
            </summary>
        </member>
        <member name="T:fyiReporting.RDL.ZipWrap">
            <summary>
            ZipWrap loads the SharpZipLib dll and facilitates the wrapping of ZipOutputStream and ZipEntry 
            </summary>
        </member>
        <member name="T:fyiReporting.RDL.ParameterLexer">
            <summary>
            A simple Lexer that is used to create a list of parameters.
            </summary>
        </member>
        <member name="M:fyiReporting.RDL.ParameterLexer.#ctor(System.String)">
            <summary>
            Initializes a new instance of the Lexer class with the specified
            expression syntax to lex.
            </summary>
            <param name="expr">An expression to lex.</param>
        </member>
        <member name="M:fyiReporting.RDL.ParameterLexer.#ctor(System.IO.TextReader)">
            <summary>
            Initializes a new instance of the Lexer class with the specified
            TextReader to lex.
            </summary>
            <param name="source">A TextReader to lex.</param>
        </member>
        <member name="M:fyiReporting.RDL.ParameterLexer.Lex">
            <summary>
            Breaks the input stream onto the tokens list and returns an ArrayList of strings.
            </summary>
            <returns>The array of items broken out from the string</returns>
        </member>
        <member name="T:fyiReporting.RDL.RenderHtmlTable">
            <summary>
             Renders a report to HTML.  All positioning is handled via tables.
            </summary>
        </member>
        <member name="T:fyiReporting.RDL.PdfOutline">
             <summary>
            Represents the outline dictionary
             </summary>
        </member>
        <member name="M:fyiReporting.RDL.PdfOutline.GetOutlineDict(System.Int64,System.Int32@)">
            <summary>
            Gets the outline entries to be written to the file
            </summary>
            <returns></returns>
        </member>
        <member name="T:fyiReporting.RDL.PdfOutlineEntry">
             <summary>
            Represents a outline entry
             </summary>
        </member>
        <member name="M:fyiReporting.RDL.PdfOutlineEntry.#ctor(fyiReporting.RDL.PdfAnchor,System.Int32,System.String,System.Single,System.Single)">
            <summary>
            Create the image Dictionary
            </summary>
        </member>
        <member name="T:fyiReporting.RDL.PageTextHtmlCmdLexer">
            <summary>
            A simple lexer that is used by PageTextHtml to break an HTML command into name value pairs.
            </summary>
        </member>
        <member name="M:fyiReporting.RDL.PageTextHtmlCmdLexer.#ctor(System.String)">
            <summary>
            Initializes a new instance of the Lexer class with the specified
            TextReader to lex.
            </summary>
            <param name="source">A TextReader to lex.</param>
        </member>
        <member name="M:fyiReporting.RDL.PageTextHtmlCmdLexer.Lex">
            <summary>
            Breaks the input stream onto the tokens list and returns a hash table with the name value pairs.
            </summary>
            <returns>The hash table.</returns>
        </member>
        <member name="M:fyiReporting.RDL.PageTextHtmlCmdLexer.CharReader.#ctor(System.String)">
            <summary>
            Initializes a new instance of the CharReader class.
            </summary>
        </member>
        <member name="M:fyiReporting.RDL.PageTextHtmlCmdLexer.CharReader.GetNext">
            <summary>
            Returns the next char from the stream.
            </summary>
        </member>
        <member name="M:fyiReporting.RDL.PageTextHtmlCmdLexer.CharReader.Peek">
            <summary>
            Returns the next char from the stream without removing it.
            </summary>
        </member>
        <member name="M:fyiReporting.RDL.PageTextHtmlCmdLexer.CharReader.UnGet">
            <summary>
            Undoes the extracting of the last char.
            </summary>
        </member>
        <member name="M:fyiReporting.RDL.PageTextHtmlCmdLexer.CharReader.EndOfInput">
            <summary>
            Returns True if end of input was reached; otherwise False.
            </summary>
        </member>
        <member name="T:fyiReporting.RDL.XmlUtil">
            <summary>
             Some utility classes consisting entirely of static routines.
            </summary>
        </member>
        <member name="M:fyiReporting.RDL.XmlUtil.XmlAnsi(System.String)">
            <summary>
            Takes an arbritrary string and returns a string that can be embedded in an
            XML element.  For example, '&lt;' is changed to '&amp;lt;'
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:fyiReporting.RDL.XmlUtil.HtmlAnsi(System.String)">
            <summary>
            Takes an arbritrary string and returns a string that can be handles unicode
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:fyiReporting.RDL.XmlUtil.AssemblyLoadFrom(System.String)">
            <summary>
            Loads assembly from file; tries up to 3 time; load with name, load from BaseDirectory, 
            and load from BaseDirectory concatenated with Relative directory.
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="T:fyiReporting.RDL.CharReader">
            <summary>
            char reader simply reads entire file into a string and processes.
            </summary>
        </member>
        <member name="M:fyiReporting.RDL.CharReader.#ctor(System.IO.TextReader)">
            <summary>
            Initializes a new instance of the CharReader class.
            </summary>
            <param name="textReader">TextReader with DPL definition.</param>
        </member>
        <member name="M:fyiReporting.RDL.CharReader.GetNext">
            <summary>
            Returns the next char from the stream.
            </summary>
            <returns>The next char.</returns>
        </member>
        <member name="M:fyiReporting.RDL.CharReader.Peek">
            <summary>
            Returns the next char from the stream without removing it.
            </summary>
            <returns>The top char.</returns>
        </member>
        <member name="M:fyiReporting.RDL.CharReader.UnGet">
            <summary>
            Undoes the extracting of the last char.
            </summary>
        </member>
        <member name="M:fyiReporting.RDL.CharReader.EndOfInput">
            <summary>
            Returns True if end of input was reached; otherwise False.
            </summary>
            <returns>True if end of input was reached; otherwise False.</returns>
        </member>
        <member name="P:fyiReporting.RDL.CharReader.Column">
            <summary>
            Gets the current column.
            </summary>
        </member>
        <member name="P:fyiReporting.RDL.CharReader.Line">
            <summary>
            Gets the current line.
            </summary>
        </member>
        <member name="T:fyiReporting.RDL.Lexer">
            <summary>
            A simple Lexer that is used by Parser.
            </summary>
        </member>
        <member name="M:fyiReporting.RDL.Lexer.#ctor(System.String)">
            <summary>
            Initializes a new instance of the Lexer class with the specified
            expression syntax to lex.
            </summary>
            <param name="expr">An expression to lex.</param>
        </member>
        <member name="M:fyiReporting.RDL.Lexer.#ctor(System.IO.TextReader)">
            <summary>
            Initializes a new instance of the Lexer class with the specified
            TextReader to lex.
            </summary>
            <param name="source">A TextReader to lex.</param>
        </member>
        <member name="M:fyiReporting.RDL.Lexer.Lex">
            <summary>
            Breaks the input stream onto the tokens list and returns it.
            </summary>
            <returns>The tokens list.</returns>
        </member>
        <member name="T:fyiReporting.RDL.Parser">
            <summary>
            <p>Language parser.   Recursive descent parser.  Precedence of operators
            is handled by starting with lowest precedence and calling down recursively
            to the highest.</p>
            AND/OR
            NOT
            relational operators, eq, ne, lt, lte, gt, gte
            +, -
            *, /, %
            ^ (exponentiation)
            unary +, -
            parenthesis (...)
            <p>
            In BNF the language grammar is:</p>
            <code>
            Expr: Term ExprRhs
            ExprRhs: PlusMinusOperator Term ExprRhs
            Term: Factor TermRhs
            TermRhs: MultDivOperator Factor TermRhs
            Factor: ( Expr ) | BaseType | - BaseType | - ( Expr )
            BaseType: FuncIdent | NUMBER | QUOTE   
            FuncIDent: IDENTIFIER ( [Expr] [, Expr]*) | IDENTIFIER
            PlusMinusOperator: + | -
            MultDivOperator: * | /
            </code>
            
            </summary>
        </member>
        <member name="M:fyiReporting.RDL.Parser.#ctor(System.Collections.Generic.List{fyiReporting.RDL.ICacheData})">
            <summary>
            Parse an expression.
            </summary>
        </member>
        <member name="M:fyiReporting.RDL.Parser.Parse(fyiReporting.RDL.NameLookup,System.String)">
            <summary>
            Returns a parsed Expression
            </summary>
            <param name="lu">The NameLookUp class used to resolve names.</param>
            <param name="expr">The expression to be parsed.</param>
            <returns>An expression that can be run after validation and binding.</returns>
        </member>
        <member name="M:fyiReporting.RDL.Parser.ParseExpr(System.IO.TextReader)">
            <summary>
            Returns a parsed DPL instance.
            </summary>
            <param name="reader">The TextReader value to be parsed.</param>
            <returns>A parsed Program instance.</returns>
        </member>
        <member name="T:fyiReporting.RDL.ParserException">
            <summary>
            Represents an exception throwed by lexer and parser.
            </summary>
        </member>
        <member name="M:fyiReporting.RDL.ParserException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the ParserException class with the
            specified message.
            </summary>
            <param name="message">A message.</param>
        </member>
        <member name="T:fyiReporting.RDL.Token">
            <summary>
            Token class that used by LangParser.
            </summary>
        </member>
        <member name="M:fyiReporting.RDL.Token.#ctor(System.String,System.Int32,System.Int32,System.Int32,System.Int32,fyiReporting.RDL.TokenTypes)">
            <summary>
            Initializes a new instance of the Token class.
            </summary>
        </member>
        <member name="M:fyiReporting.RDL.Token.#ctor(System.String,fyiReporting.RDL.TokenTypes)">
            <summary>
            Initializes a new instance of the Token class.
            </summary>
        </member>
        <member name="M:fyiReporting.RDL.Token.#ctor(fyiReporting.RDL.TokenTypes)">
            <summary>
            Initializes a new instance of the Token class.
            </summary>
        </member>
        <member name="M:fyiReporting.RDL.Token.ToString">
            <summary>
            Returns a string representation of the Token.
            </summary>
        </member>
        <member name="T:fyiReporting.RDL.TokenList">
            <summary>
            Represents a list of the tokens.
            </summary>
        </member>
        <member name="T:fyiReporting.RDL.TokenTypes">
            <summary>
            Summary description for TokenTypes.
            </summary>
        </member>
        <member name="T:fyiReporting.RDL.Constant">
            <summary>
            <p>Expression definition</p>
            </summary>
        </member>
        <member name="M:fyiReporting.RDL.Constant.#ctor(System.String)">
            <summary>
            Constant - as opposed to an expression
            </summary>
        </member>
        <member name="T:fyiReporting.RDL.ConstantBoolean">
            <summary>
            Boolean constant
            </summary>
        </member>
        <member name="M:fyiReporting.RDL.ConstantBoolean.#ctor(System.String)">
            <summary>
            A boolean constant: i.e. true or false.
            </summary>
        </member>
        <member name="T:fyiReporting.RDL.ConstantDateTime">
            <summary>
            Constant DateTime
            </summary>
        </member>
        <member name="M:fyiReporting.RDL.ConstantDateTime.#ctor(System.String)">
            <summary>
            passed class name, function name, and args for evaluation
            </summary>
        </member>
        <member name="T:fyiReporting.RDL.ConstantDecimal">
            <summary>
            Constant decimal.
            </summary>
        </member>
        <member name="M:fyiReporting.RDL.ConstantDecimal.#ctor(System.String)">
            <summary>
            passed string of the number
            </summary>
        </member>
        <member name="T:fyiReporting.RDL.ConstantDouble">
            <summary>
            Constant Double
            </summary>
        </member>
        <member name="M:fyiReporting.RDL.ConstantDouble.#ctor(System.String)">
            <summary>
            passed class name, function name, and args for evaluation
            </summary>
        </member>
        <member name="T:fyiReporting.RDL.ConstantError">
            <summary>
            Error in expression;  don't want iexpr to be null so this is returned.
            </summary>
        </member>
        <member name="M:fyiReporting.RDL.ConstantError.#ctor(System.String)">
            <summary>
            Constant - as opposed to an expression
            </summary>
        </member>
        <member name="T:fyiReporting.RDL.ConstantInteger">
            <summary>
            Constant Integer
            </summary>
        </member>
        <member name="M:fyiReporting.RDL.ConstantInteger.#ctor(System.String)">
            <summary>
            passed class name, function name, and args for evaluation
            </summary>
        </member>
        <member name="T:fyiReporting.RDL.ConstantString">
            <summary>
            String constant
            </summary>
        </member>
        <member name="M:fyiReporting.RDL.ConstantString.#ctor(System.String)">
            <summary>
            passed class name, function name, and args for evaluation
            </summary>
        </member>
        <member name="T:fyiReporting.RDL.Financial">
            <summary>
            The Financial class holds a number of static functions relating to financial
            calculations.
            
            Note: many of the financial functions use the following function as their basis
             pv*(1+rate)^nper+pmt*(1+rate*type)*((1+rate)^nper-1)/rate)+fv=0
             if rate = 0
             (pmt*nper)+pv+fv=0
            </summary>
        </member>
        <member name="M:fyiReporting.RDL.Financial.DDB(System.Double,System.Double,System.Int32,System.Int32)">
            <summary>
            Double declining balance depreciation (when factor = 2).  Other factors may be specified.
            </summary>
            <param name="cost">Initial cost of asset</param>
            <param name="salvage">Salvage value of asset at end of depreciation</param>
            <param name="life">Number of periods over which to depreciate the asset.  AKA useful life</param>
            <param name="period">The period for which you want to know the depreciation amount.</param>
            <returns></returns>
        </member>
        <member name="M:fyiReporting.RDL.Financial.DDB(System.Double,System.Double,System.Int32,System.Int32,System.Double)">
            <summary>
            Double declining balance depreciation (when factor = 2).  Other factors may be specified.
            </summary>
            <param name="cost">Initial cost of asset</param>
            <param name="salvage">Salvage value of asset at end of depreciation</param>
            <param name="life">Number of periods over which to depreciate the asset.  AKA useful life</param>
            <param name="period">The period for which you want to know the depreciation amount.</param>
            <param name="factor">The rate at which the balance declines.  Defaults to 2 (double declining) when omitted.</param>
            <returns></returns>
        </member>
        <member name="M:fyiReporting.RDL.Financial.FV(System.Double,System.Int32,System.Double,System.Double,System.Boolean)">
            <summary>
            Returns the future value of an investment when using periodic, constant payments and 
            constant interest rate.
            </summary>
            <param name="rate">Interest rate per period</param>
            <param name="periods">Total number of payment periods</param>
            <param name="pmt">Amount of payment each period</param>
            <param name="presentValue">Lump sum amount that a series of payments is worth now</param>
            <param name="endOfPeriod">Specify true if payments are due at end of period, otherwise false</param>
            <returns></returns>
        </member>
        <member name="M:fyiReporting.RDL.Financial.IPmt(System.Double,System.Int32,System.Int32,System.Double,System.Double,System.Boolean)">
            <summary>
            Returns the interest payment portion of a payment given a particular period.
            </summary>
            <param name="rate">Interest rate per period</param>
            <param name="period">Period for which you want the interest payment.</param>
            <param name="periods">Total number of payment periods</param>
            <param name="presentValue">Lump sum amount that a series of payments is worth now</param>
            <param name="futureValue">Cash balance you want to attain after last payment</param>
            <param name="endOfPeriod">Specify true if payments are due at end of period, otherwise false</param>
            <returns></returns>
        </member>
        <member name="M:fyiReporting.RDL.Financial.NPer(System.Double,System.Double,System.Double,System.Double,System.Boolean)">
            <summary>
            Returns the number of periods for an investment.
            </summary>
            <param name="rate">Interest rate per period</param>
            <param name="pmt">Amount of payment each period</param>
            <param name="presentValue">Lump sum amount that a series of payments is worth now</param>
            <param name="futureValue">Future value or cash balance you want after last payment</param>
            <param name="endOfPeriod">Specify true if payments are due at end of period, otherwise false</param>
            <returns></returns>
        </member>
        <member name="M:fyiReporting.RDL.Financial.Pmt(System.Double,System.Int32,System.Double,System.Double,System.Boolean)">
            <summary>
            Returns the periodic payment for an annuity using constant payments and 
            constant interest rate.
            </summary>
            <param name="rate">Interest rate per period</param>
            <param name="periods">Total number of payment periods</param>
            <param name="presentValue">Lump sum amount that a series of payments is worth now</param>
            <param name="futureValue">Cash balance you want to attain after last payment</param>
            <param name="endOfPeriod">Specify true if payments are due at end of period, otherwise false</param>
            <returns></returns>
        </member>
        <member name="M:fyiReporting.RDL.Financial.PV(System.Double,System.Int32,System.Double,System.Double,System.Boolean)">
            <summary>
            Returns the present value of an investment.  The present value is the total
            amount that a series of future payments is worth now. 
            </summary>
            <param name="rate">Interest rate per period</param>
            <param name="periods">Total number of payment periods</param>
            <param name="pmt">Amount of payment each period</param>
            <param name="futureValue">Cash balance you want to attain after last payment is made</param>
            <param name="endOfPeriod">Specify true if payments are due at end of period, otherwise false</param>
            <returns></returns>
        </member>
        <member name="M:fyiReporting.RDL.Financial.Rate(System.Int32,System.Double,System.Double,System.Double,System.Boolean,System.Double)">
            <summary>
            Returns the interest rate per period for an annuity.  This routine uses an
            iterative approach to solving for rate.   If after 30 iterations the answer
            doesn't converge to within 0.0000001 then double.NAN is returned.
            </summary>
            <param name="periods">Total number of payment periods</param>
            <param name="pmt">Amount of payment each period</param>
            <param name="presentValue">Lump sum amount that a series of payments is worth now</param>
            <param name="futureValue">Cash balance you want to attain after last payment</param>
            <param name="endOfPeriod">Specify true if payments are due at end of period, otherwise false</param>
            <param name="guess">Your guess as to what the interest rate will be.</param>
            <returns></returns>
        </member>
        <member name="M:fyiReporting.RDL.Financial.SLN(System.Double,System.Double,System.Double)">
            <summary>
            SLN returns the straight line depreciation for an asset for a single period.
            </summary>
            <param name="cost">Initial cost of asset</param>
            <param name="salvage">Salvage value of asset at end of depreciation</param>
            <param name="life">Number of periods over which to depreciate the asset. AKA useful life</param>
            <returns></returns>
        </member>
        <member name="M:fyiReporting.RDL.Financial.SYD(System.Double,System.Double,System.Int32,System.Int32)">
            <summary>
            Sum of years digits depreciation.  An asset often loses more of its value early in its lifetime. 
            SYD has this behavior.
            </summary>
            <param name="cost">Initial cost of asset</param>
            <param name="salvage">Salvage value of asset at end of depreciation</param>
            <param name="life">Number of periods over which to depreciate the asset.  AKA useful life</param>
            <param name="period">The period for which you want to know the depreciation amount.</param>
            <returns></returns>
        </member>
        <member name="T:fyiReporting.RDL.FunctionAggrAvg">
            <summary>
            Aggregate function: average
            </summary>
        </member>
        <member name="M:fyiReporting.RDL.FunctionAggrAvg.#ctor(System.Collections.Generic.List{fyiReporting.RDL.ICacheData},fyiReporting.RDL.IExpr,System.Object)">
            <summary>
            Aggregate function: Sum returns the sum of all values of the
            	expression within the scope
            Return type is decimal for decimal expressions and double for all
            other expressions.	
            </summary>
        </member>
        <member name="T:fyiReporting.RDL.FunctionAggrCount">
            <summary>
            Aggregate function: Count
            </summary>
        </member>
        <member name="M:fyiReporting.RDL.FunctionAggrCount.#ctor(System.Collections.Generic.List{fyiReporting.RDL.ICacheData},fyiReporting.RDL.IExpr,System.Object)">
            <summary>
            Aggregate function: Count
            
            Return type is double
            </summary>
        </member>
        <member name="T:fyiReporting.RDL.FunctionAggrCountDistinct">
            <summary>
            Aggregate function: CountDistinct
            </summary>
        </member>
        <member name="M:fyiReporting.RDL.FunctionAggrCountDistinct.#ctor(System.Collections.Generic.List{fyiReporting.RDL.ICacheData},fyiReporting.RDL.IExpr,System.Object)">
            <summary>
            Aggregate function: CountDistinct
            
            Return type is double
            </summary>
        </member>
        <member name="T:fyiReporting.RDL.FunctionAggrCountRows">
            <summary>
            Aggregate function: CountRows
            </summary>
        </member>
        <member name="M:fyiReporting.RDL.FunctionAggrCountRows.#ctor(System.Object)">
            <summary>
            Aggregate function: CountRows
            
            Return type is double
            </summary>
        </member>
        <member name="T:fyiReporting.RDL.FunctionAggrFirst">
            <summary>
            Aggregate function: first
            </summary>
        </member>
        <member name="M:fyiReporting.RDL.FunctionAggrFirst.#ctor(System.Collections.Generic.List{fyiReporting.RDL.ICacheData},fyiReporting.RDL.IExpr,System.Object)">
            <summary>
            Aggregate function: first returns the first value in a group
            Return type is same as input expression	
            </summary>
        </member>
        <member name="T:fyiReporting.RDL.FunctionAggrLast">
            <summary>
            Aggregate function: last
            </summary>
        </member>
        <member name="M:fyiReporting.RDL.FunctionAggrLast.#ctor(System.Collections.Generic.List{fyiReporting.RDL.ICacheData},fyiReporting.RDL.IExpr,System.Object)">
            <summary>
            Aggregate function: Last returns the last value in the group
            Return type is same as input expression	
            </summary>
        </member>
        <member name="T:fyiReporting.RDL.FunctionAggrLevel">
            <summary>
            Aggregate function: Level
            </summary>
        </member>
        <member name="M:fyiReporting.RDL.FunctionAggrLevel.#ctor(System.Object)">
            <summary>
            Aggregate function: Level
            
            Return type is double
            </summary>
        </member>
        <member name="T:fyiReporting.RDL.FunctionAggrMax">
            <summary>
            Aggregate function: max
            </summary>
        </member>
        <member name="M:fyiReporting.RDL.FunctionAggrMax.#ctor(System.Collections.Generic.List{fyiReporting.RDL.ICacheData},fyiReporting.RDL.IExpr,System.Object)">
            <summary>
            Aggregate function: Max returns the highest value
            Return type is same as input expression	
            </summary>
        </member>
        <member name="T:fyiReporting.RDL.FunctionAggrMin">
            <summary>
            Aggregate function: min
            </summary>
        </member>
        <member name="M:fyiReporting.RDL.FunctionAggrMin.#ctor(System.Collections.Generic.List{fyiReporting.RDL.ICacheData},fyiReporting.RDL.IExpr,System.Object)">
            <summary>
            Aggregate function: Min returns the lowest value
            Return type is same as input expression	
            </summary>
        </member>
        <member name="T:fyiReporting.RDL.FunctionAggrNext">
            <summary>
            Aggregate function: next
            </summary>
        </member>
        <member name="M:fyiReporting.RDL.FunctionAggrNext.#ctor(System.Collections.Generic.List{fyiReporting.RDL.ICacheData},fyiReporting.RDL.IExpr,System.Object)">
            <summary>
            Aggregate function: next returns the next value in a group
            Return type is same as input expression	
            </summary>
        </member>
        <member name="T:fyiReporting.RDL.FunctionAggrPrevious">
            <summary>
            Aggregate function: next
            </summary>
        </member>
        <member name="M:fyiReporting.RDL.FunctionAggrPrevious.#ctor(System.Collections.Generic.List{fyiReporting.RDL.ICacheData},fyiReporting.RDL.IExpr,System.Object)">
            <summary>
            Aggregate function: next returns the next value in a group
            Return type is same as input expression	
            </summary>
        </member>
        <member name="T:fyiReporting.RDL.FunctionAggrRvAvg">
            <summary>
            Aggregate function: RunningValue avg
            </summary>
        </member>
        <member name="M:fyiReporting.RDL.FunctionAggrRvAvg.#ctor(System.Collections.Generic.List{fyiReporting.RDL.ICacheData},fyiReporting.RDL.IExpr,System.Object)">
            <summary>
            Aggregate function: RunningValue Sum returns the sum of all values of the
            	expression within the scope up to that row
            Return type is decimal for decimal expressions and double for all
            other expressions.	
            </summary>
        </member>
        <member name="T:fyiReporting.RDL.FunctionAggrRvCount">
            <summary>
            Aggregate function: RunningValue count
            </summary>
        </member>
        <member name="M:fyiReporting.RDL.FunctionAggrRvCount.#ctor(System.Collections.Generic.List{fyiReporting.RDL.ICacheData},fyiReporting.RDL.IExpr,System.Object)">
            <summary>
            Aggregate function: RunningValue Sum returns the sum of all values of the
            	expression within the scope up to that row
            Return type is decimal for decimal expressions and double for all
            other expressions.	
            </summary>
        </member>
        <member name="T:fyiReporting.RDL.FunctionAggrRvMax">
            <summary>
            Aggregate function: RunningValue max
            </summary>
        </member>
        <member name="M:fyiReporting.RDL.FunctionAggrRvMax.#ctor(System.Collections.Generic.List{fyiReporting.RDL.ICacheData},fyiReporting.RDL.IExpr,System.Object)">
            <summary>
            Aggregate function: Running Max returns the highest value to date within a group
            Return type is same as input expression	
            </summary>
        </member>
        <member name="T:fyiReporting.RDL.FunctionAggrRvMin">
            <summary>
            Aggregate function: RunningValue min
            </summary>
        </member>
        <member name="M:fyiReporting.RDL.FunctionAggrRvMin.#ctor(System.Collections.Generic.List{fyiReporting.RDL.ICacheData},fyiReporting.RDL.IExpr,System.Object)">
            <summary>
            Aggregate function: Running Max returns the highest value to date within a group
            Return type is same as input expression	
            </summary>
        </member>
        <member name="T:fyiReporting.RDL.FunctionAggrRvStdev">
            <summary>
            Aggregate function: RunningValue stdev
            </summary>
        </member>
        <member name="M:fyiReporting.RDL.FunctionAggrRvStdev.#ctor(System.Collections.Generic.List{fyiReporting.RDL.ICacheData},fyiReporting.RDL.IExpr,System.Object)">
            <summary>
            Aggregate function: RunningValue Stdev returns the Stdev of all values of the
            	expression within the scope up to that row
            Return type is double for all expressions.	
            </summary>
        </member>
        <member name="T:fyiReporting.RDL.FunctionAggrRvStdevp">
            <summary>
            Aggregate function: RunningValue stdevp
            </summary>
        </member>
        <member name="M:fyiReporting.RDL.FunctionAggrRvStdevp.#ctor(System.Collections.Generic.List{fyiReporting.RDL.ICacheData},fyiReporting.RDL.IExpr,System.Object)">
            <summary>
            Aggregate function: RunningValue Stdevp returns the Stdevp of all values of the
            	expression within the scope up to that row
            Return type is double for all expressions.	
            </summary>
        </member>
        <member name="T:fyiReporting.RDL.FunctionAggrRvSum">
            <summary>
            Aggregate function: RunningValue sum
            </summary>
        </member>
        <member name="M:fyiReporting.RDL.FunctionAggrRvSum.#ctor(System.Collections.Generic.List{fyiReporting.RDL.ICacheData},fyiReporting.RDL.IExpr,System.Object)">
            <summary>
            Aggregate function: RunningValue Sum returns the sum of all values of the
            	expression within the scope up to that row
            Return type is decimal for decimal expressions and double for all
            other expressions.	
            </summary>
        </member>
        <member name="T:fyiReporting.RDL.FunctionAggrRvVar">
            <summary>
            Aggregate function: RunningValue var
            </summary>
        </member>
        <member name="M:fyiReporting.RDL.FunctionAggrRvVar.#ctor(System.Collections.Generic.List{fyiReporting.RDL.ICacheData},fyiReporting.RDL.IExpr,System.Object)">
            <summary>
            Aggregate function: RunningValue var returns the variance of all values of the
            	expression within the scope up to that row
            Return type is double for all expressions.	
            </summary>
        </member>
        <member name="T:fyiReporting.RDL.FunctionAggrRvVarp">
            <summary>
            Aggregate function: RunningValue varp
            </summary>
        </member>
        <member name="M:fyiReporting.RDL.FunctionAggrRvVarp.#ctor(System.Collections.Generic.List{fyiReporting.RDL.ICacheData},fyiReporting.RDL.IExpr,System.Object)">
            <summary>
            Aggregate function: RunningValue var returns the variance of all values of the
            	expression within the scope up to that row
            Return type is double for all expressions.	
            </summary>
        </member>
        <member name="T:fyiReporting.RDL.FunctionAggrStdev">
            <summary>
            Aggregate function: Stdev
            </summary>
        </member>
        <member name="M:fyiReporting.RDL.FunctionAggrStdev.#ctor(System.Collections.Generic.List{fyiReporting.RDL.ICacheData},fyiReporting.RDL.IExpr,System.Object)">
            <summary>
            Aggregate function: Stdev = (sqrt(n sum(square(x)) - square((sum(x))) / n(n-1)
            Stdev assumes values are a sample of the population of data.  If the data
            is the entire representation then use Stdevp.
            
            Return type is decimal for decimal expressions and double for all
            other expressions.	
            </summary>
        </member>
        <member name="T:fyiReporting.RDL.FunctionAggrStdevp">
            <summary>
            Aggregate function: Stdevp
            </summary>
        </member>
        <member name="M:fyiReporting.RDL.FunctionAggrStdevp.#ctor(System.Collections.Generic.List{fyiReporting.RDL.ICacheData},fyiReporting.RDL.IExpr,System.Object)">
            <summary>
            Aggregate function: Stdevp = (sqrt(n sum(square(x)) - square((sum(x))) / n*n)
            Stdev assumes values are a sample of the population of data.  If the data
            is the entire representation then use Stdevp.
            
            Return type is decimal for decimal expressions and double for all
            other expressions.	
            </summary>
        </member>
        <member name="T:fyiReporting.RDL.FunctionAggrSum">
            <summary>
            Aggregate function: sum
            </summary>
        </member>
        <member name="M:fyiReporting.RDL.FunctionAggrSum.#ctor(System.Collections.Generic.List{fyiReporting.RDL.ICacheData},fyiReporting.RDL.IExpr,System.Object)">
            <summary>
            Aggregate function: Sum returns the sum of all values of the
            	expression within the scope
            Return type is decimal for decimal expressions and double for all
            other expressions.	
            </summary>
        </member>
        <member name="T:fyiReporting.RDL.FunctionAggrVar">
            <summary>
            Aggregate function: Variance
            </summary>
        </member>
        <member name="M:fyiReporting.RDL.FunctionAggrVar.#ctor(System.Collections.Generic.List{fyiReporting.RDL.ICacheData},fyiReporting.RDL.IExpr,System.Object)">
            <summary>
            Aggregate function: Var = n sum(square(x)) - square((sum(x))) / n(n-1)
            Stdev assumes values are a sample of the population of data.  If the data
            is the entire representation then use Stdevp.
            </summary>
        </member>
        <member name="T:fyiReporting.RDL.FunctionAggrVarp">
            <summary>
            Aggregate function: Varp
            </summary>
        </member>
        <member name="M:fyiReporting.RDL.FunctionAggrVarp.#ctor(System.Collections.Generic.List{fyiReporting.RDL.ICacheData},fyiReporting.RDL.IExpr,System.Object)">
            <summary>
            Aggregate function: Varp = (n sum(square(x)) - square((sum(x))) / n*n
            Stdev assumes values are a sample of the population of data.  If the data
            is the entire representation then use Stdevp.
            </summary>
        </member>
        <member name="T:fyiReporting.RDL.FunctionAnd">
            <summary>
            And operator of form lhs &amp;&amp; rhs
            </summary>
        </member>
        <member name="M:fyiReporting.RDL.FunctionAnd.#ctor(fyiReporting.RDL.IExpr,fyiReporting.RDL.IExpr)">
            <summary>
            And two boolean expressions together of the form a &amp;&amp; b
            </summary>
        </member>
        <member name="T:fyiReporting.RDL.FunctionChoose">
            <summary>
            Choose function of the form Choose(int, expr1, expr2, ...)
            
            
            </summary>
        </member>
        <member name="M:fyiReporting.RDL.FunctionChoose.#ctor(fyiReporting.RDL.IExpr[])">
            <summary>
            Choose function of the form Choose(int, expr1, expr2, ...)
            </summary>
        </member>
        <member name="T:fyiReporting.RDL.FunctionCode">
            <summary>
            Handles calling function in the Code element
            </summary>
        </member>
        <member name="M:fyiReporting.RDL.FunctionCode.#ctor(System.String,fyiReporting.RDL.IExpr[],System.TypeCode)">
            <summary>
            passed ReportClass, function name, and args for evaluation
            </summary>
        </member>
        <member name="T:fyiReporting.RDL.FunctionCustomInstance">
            <summary>
            Process a custom instance method request.
            </summary>
        </member>
        <member name="M:fyiReporting.RDL.FunctionCustomInstance.#ctor(fyiReporting.RDL.ReportClass,System.String,fyiReporting.RDL.IExpr[],System.TypeCode)">
            <summary>
            passed ReportClass, function name, and args for evaluation
            </summary>
        </member>
        <member name="T:fyiReporting.RDL.FunctionCustomStatic">
            <summary>
            Process a custom static method invokation.
            </summary>
        </member>
        <member name="M:fyiReporting.RDL.FunctionCustomStatic.#ctor(fyiReporting.RDL.CodeModules,System.String,System.String,fyiReporting.RDL.IExpr[],System.TypeCode)">
            <summary>
            passed class name, function name, and args for evaluation
            </summary>
        </member>
        <member name="T:fyiReporting.RDL.FunctionDiv">
            <summary>
            Division operator  of form lhs / rhs
            </summary>
        </member>
        <member name="M:fyiReporting.RDL.FunctionDiv.#ctor">
            <summary>
            Do division on double data types
            </summary>
        </member>
        <member name="T:fyiReporting.RDL.FunctionDivDecimal">
            <summary>
            Division operator  of form lhs / rhs where both arguments are decimal.
            </summary>
        </member>
        <member name="M:fyiReporting.RDL.FunctionDivDecimal.#ctor">
            <summary>
            Do division on decimal data types
            </summary>
        </member>
        <member name="T:fyiReporting.RDL.FunctionExecutionTime">
            <summary>
            DateTime Report started; actually the time that data is retrieved
            </summary>
        </member>
        <member name="M:fyiReporting.RDL.FunctionExecutionTime.#ctor">
            <summary>
            DateTime report started
            </summary>
        </member>
        <member name="T:fyiReporting.RDL.FunctionExp">
            <summary>
            Exponentiation operator  of form lhs ^ rhs
            </summary>
        </member>
        <member name="M:fyiReporting.RDL.FunctionExp.#ctor">
            <summary>
            Do exponentiation on double data types
            </summary>
        </member>
        <member name="T:fyiReporting.RDL.FunctionField">
            <summary>
            Obtain the the Field's value from a row.
            </summary>
        </member>
        <member name="M:fyiReporting.RDL.FunctionField.#ctor(fyiReporting.RDL.Field)">
            <summary>
            obtain value of Field
            </summary>
        </member>
        <member name="T:fyiReporting.RDL.FunctionFieldCollection">
            <summary>
            Fields referenced dynamically (e.g. Fields(expr) are handled by this class.
            </summary>
        </member>
        <member name="M:fyiReporting.RDL.FunctionFieldCollection.#ctor(System.Collections.IDictionary,fyiReporting.RDL.IExpr)">
            <summary>
            obtain value of Field
            </summary>
        </member>
        <member name="T:fyiReporting.RDL.FunctionFieldIsMissing">
            <summary>
            IsMissing attribute
            </summary>
        </member>
        <member name="M:fyiReporting.RDL.FunctionFieldIsMissing.#ctor(fyiReporting.RDL.Field)">
            <summary>
            Determine if value of Field is available
            </summary>
        </member>
        <member name="T:fyiReporting.RDL.FunctionFormat">
            <summary>
            Format function: Format(expr, string expr format)
            </summary>
        </member>
        <member name="M:fyiReporting.RDL.FunctionFormat.#ctor(fyiReporting.RDL.IExpr,fyiReporting.RDL.IExpr)">
            <summary>
            Format an object
            </summary>
        </member>
        <member name="T:fyiReporting.RDL.FunctionGlobalCollection">
            <summary>
            Global fields accessed dynamically. i.e. Globals(expr).
            </summary>
        </member>
        <member name="M:fyiReporting.RDL.FunctionGlobalCollection.#ctor(System.Collections.IDictionary,fyiReporting.RDL.IExpr)">
            <summary>
            obtain value of Field
            </summary>
        </member>
        <member name="T:fyiReporting.RDL.FunctionIif">
            <summary>
            iif function of the form iif(boolean, expr1, expr2)
            </summary>
        </member>
        <member name="M:fyiReporting.RDL.FunctionIif.#ctor(fyiReporting.RDL.IExpr,fyiReporting.RDL.IExpr,fyiReporting.RDL.IExpr)">
            <summary>
            Handle iif operator
            </summary>
        </member>
        <member name="T:fyiReporting.RDL.FunctionMinus">
            <summary>
            Minus operator  of form lhs - rhs
            </summary>
        </member>
        <member name="M:fyiReporting.RDL.FunctionMinus.#ctor">
            <summary>
            Do minus on double data types
            </summary>
        </member>
        <member name="T:fyiReporting.RDL.FunctionMinusDecimal">
            <summary>
            Minus operator  of form lhs - rhs where both operands are decimal.
            </summary>
        </member>
        <member name="M:fyiReporting.RDL.FunctionMinusDecimal.#ctor">
            <summary>
            Do minus on decimal data types
            </summary>
        </member>
        <member name="T:fyiReporting.RDL.FunctionModulus">
            <summary>
            Modulus operator  of form lhs % rhs
            </summary>
        </member>
        <member name="M:fyiReporting.RDL.FunctionModulus.#ctor(fyiReporting.RDL.IExpr,fyiReporting.RDL.IExpr)">
            <summary>
            Do modulus on double data types
            </summary>
        </member>
        <member name="T:fyiReporting.RDL.FunctionMult">
            <summary>
            Mult operator  of form lhs * rhs
            </summary>
        </member>
        <member name="M:fyiReporting.RDL.FunctionMult.#ctor">
            <summary>
            Do multiplication on double data types
            </summary>
        </member>
        <member name="T:fyiReporting.RDL.FunctionMultDecimal">
            <summary>
            Multiplication operator  of form lhs * rhs where both operands are decimal.
            </summary>
        </member>
        <member name="M:fyiReporting.RDL.FunctionMultDecimal.#ctor">
            <summary>
            Do multiplication on decimal data types
            </summary>
        </member>
        <member name="T:fyiReporting.RDL.FunctionNot">
            <summary>
            NOT operator of the form ! a
            </summary>
        </member>
        <member name="M:fyiReporting.RDL.FunctionNot.#ctor(fyiReporting.RDL.IExpr)">
            <summary>
            NOT operator of the form ! a
            </summary>
        </member>
        <member name="T:fyiReporting.RDL.FunctionOr">
            <summary>
            OR operator  of form lhs || rhs
            </summary>
        </member>
        <member name="M:fyiReporting.RDL.FunctionOr.#ctor(fyiReporting.RDL.IExpr,fyiReporting.RDL.IExpr)">
            <summary>
            Or two boolean expressions together of the form a || b
            </summary>
        </member>
        <member name="T:fyiReporting.RDL.FunctionPageNumber">
            <summary>
            Page number operator.   Relies on render to set the proper page #.
            </summary>
        </member>
        <member name="M:fyiReporting.RDL.FunctionPageNumber.#ctor">
            <summary>
            Current page number
            </summary>
        </member>
        <member name="T:fyiReporting.RDL.FunctionParameterCollection">
            <summary>
            Parameters referenced via the collection.  For example, Parameters(expr)
            </summary>
        </member>
        <member name="M:fyiReporting.RDL.FunctionParameterCollection.#ctor(System.Collections.IDictionary,fyiReporting.RDL.IExpr)">
            <summary>
            obtain value of Field
            </summary>
        </member>
        <member name="T:fyiReporting.RDL.FunctionPlus">
            <summary>
            Plus operator  of form lhs + rhs
            </summary>
        </member>
        <member name="M:fyiReporting.RDL.FunctionPlus.#ctor">
            <summary>
            Do plus on double data types
            </summary>
        </member>
        <member name="T:fyiReporting.RDL.FunctionPlusDecimal">
            <summary>
            Plus operator  of form lhs + rhs where both operands are decimal
            </summary>
        </member>
        <member name="M:fyiReporting.RDL.FunctionPlusDecimal.#ctor">
            <summary>
            Do plus on decimal data types
            </summary>
        </member>
        <member name="T:fyiReporting.RDL.FunctionPlusString">
            <summary>
            Plus operator  of form lhs + rhs where operands are strings
            </summary>
        </member>
        <member name="M:fyiReporting.RDL.FunctionPlusString.#ctor(fyiReporting.RDL.IExpr,fyiReporting.RDL.IExpr)">
            <summary>
            append two strings together
            </summary>
        </member>
        <member name="T:fyiReporting.RDL.FunctionRelopEQ">
            <summary>
            Relational operator equal of form lhs == rhs
            </summary>
        </member>
        <member name="M:fyiReporting.RDL.FunctionRelopEQ.#ctor(fyiReporting.RDL.IExpr,fyiReporting.RDL.IExpr)">
            <summary>
            Do relational equal operation
            </summary>
        </member>
        <member name="T:fyiReporting.RDL.FunctionRelopGT">
            <summary>
            Relational operator equal of form lhs > rhs
            </summary>
        </member>
        <member name="M:fyiReporting.RDL.FunctionRelopGT.#ctor(fyiReporting.RDL.IExpr,fyiReporting.RDL.IExpr)">
            <summary>
            Do relational equal operation
            </summary>
        </member>
        <member name="T:fyiReporting.RDL.FunctionRelopGTE">
            <summary>
            Relational operator GTE of form lhs >= rhs
            </summary>
        </member>
        <member name="M:fyiReporting.RDL.FunctionRelopGTE.#ctor(fyiReporting.RDL.IExpr,fyiReporting.RDL.IExpr)">
            <summary>
            Do relational equal operation
            </summary>
        </member>
        <member name="T:fyiReporting.RDL.FunctionRelopLT">
            <summary>
            Relational operator LT of form lhs lt rhs
            </summary>
        </member>
        <member name="M:fyiReporting.RDL.FunctionRelopLT.#ctor(fyiReporting.RDL.IExpr,fyiReporting.RDL.IExpr)">
            <summary>
            Do relational less than operation
            </summary>
        </member>
        <member name="T:fyiReporting.RDL.FunctionRelopLTE">
            <summary>
            Relational operator LTE of form lhs LTE rhs
            </summary>
        </member>
        <member name="M:fyiReporting.RDL.FunctionRelopLTE.#ctor(fyiReporting.RDL.IExpr,fyiReporting.RDL.IExpr)">
            <summary>
            Do relational equal operation
            </summary>
        </member>
        <member name="T:fyiReporting.RDL.FunctionRelopNE">
            <summary>
            Relational operator not equal of form lhs != rhs
            </summary>
        </member>
        <member name="M:fyiReporting.RDL.FunctionRelopNE.#ctor(fyiReporting.RDL.IExpr,fyiReporting.RDL.IExpr)">
            <summary>
            Do relational not equal operation
            </summary>
        </member>
        <member name="T:fyiReporting.RDL.FunctionReportFolder">
            <summary>
            Report Folder
            </summary>
        </member>
        <member name="M:fyiReporting.RDL.FunctionReportFolder.#ctor">
            <summary>
            Folder that holds Report
            </summary>
        </member>
        <member name="T:fyiReporting.RDL.FunctionReportItemCollection">
            <summary>
            Handles references to the report item collection.
            </summary>
        </member>
        <member name="M:fyiReporting.RDL.FunctionReportItemCollection.#ctor(System.Collections.IDictionary,fyiReporting.RDL.IExpr)">
            <summary>
            obtain value of Field
            </summary>
        </member>
        <member name="T:fyiReporting.RDL.FunctionReportName">
            <summary>
            Report name
            </summary>
        </member>
        <member name="M:fyiReporting.RDL.FunctionReportName.#ctor">
            <summary>
            Current page number
            </summary>
        </member>
        <member name="T:fyiReporting.RDL.FunctionReportParameter">
            <summary>
            Obtain the runtime value of a Report parameter
            </summary>
        </member>
        <member name="M:fyiReporting.RDL.FunctionReportParameter.#ctor(fyiReporting.RDL.ReportParameter)">
            <summary>
            obtain value of ReportParameter
            </summary>
        </member>
        <member name="T:fyiReporting.RDL.FunctionReportParameterLabel">
            <summary>
            Obtain the runtime value of a report parameter label.
            </summary>
        </member>
        <member name="M:fyiReporting.RDL.FunctionReportParameterLabel.#ctor(fyiReporting.RDL.ReportParameter)">
            <summary>
            obtain value of ReportParameter
            </summary>
        </member>
        <member name="T:fyiReporting.RDL.FunctionSwitch">
            <summary>
            switch function like this example: Switch(a=1, "a1", a=2, "a2", true, "other")
            </summary>
        </member>
        <member name="M:fyiReporting.RDL.FunctionSwitch.#ctor(fyiReporting.RDL.IExpr[])">
            <summary>
            Switch function.  Evaluates boolean expression in order and returns result of
            the first true.  For example, Switch(a=1, "a1", a=2, "a2", true, "other")
            </summary>
        </member>
        <member name="T:fyiReporting.RDL.FunctionSystem">
            <summary>
            Class is used to evaluate static system classes.   System meaning
            any class that is part of this assembly.   The parser restricts this
            to Math, String, Convert, Financial, ...
            </summary>
        </member>
        <member name="M:fyiReporting.RDL.FunctionSystem.#ctor(System.String,System.String,fyiReporting.RDL.IExpr[],System.TypeCode)">
            <summary>
            passed class name, function name, and args for evaluation
            </summary>
        </member>
        <member name="T:fyiReporting.RDL.FunctionTextbox">
            <summary>
            Reference to a Textbox data value
            </summary>
        </member>
        <member name="M:fyiReporting.RDL.FunctionTextbox.#ctor(fyiReporting.RDL.Textbox,System.String)">
            <summary>
            obtain value of Textbox
            </summary>
        </member>
        <member name="T:fyiReporting.RDL.FunctionTotalPages">
            <summary>
            Total Pages
            </summary>
        </member>
        <member name="M:fyiReporting.RDL.FunctionTotalPages.#ctor">
            <summary>
            Total page count; relys on PageHeader, PageFooter to set Report.TotalPages
            </summary>
        </member>
        <member name="T:fyiReporting.RDL.FunctionUnaryMinus">
            <summary>
            Unary minus operator
            </summary>
        </member>
        <member name="M:fyiReporting.RDL.FunctionUnaryMinus.#ctor">
            <summary>
            Do division on double data types
            </summary>
        </member>
        <member name="T:fyiReporting.RDL.FunctionUnaryMinusDecimal">
            <summary>
            Unary minus operator with a decimal operand
            </summary>
        </member>
        <member name="M:fyiReporting.RDL.FunctionUnaryMinusDecimal.#ctor">
            <summary>
            Do minus on decimal data type
            </summary>
        </member>
        <member name="T:fyiReporting.RDL.FunctionUnaryMinusInteger">
            <summary>
            Unary minus operator for a integer operand
            </summary>
        </member>
        <member name="M:fyiReporting.RDL.FunctionUnaryMinusInteger.#ctor">
            <summary>
            Do minus on decimal data type
            </summary>
        </member>
        <member name="T:fyiReporting.RDL.FunctionUserCollection">
            <summary>
            Handle references to the User collection.  e.g. User("UserID")
            </summary>
        </member>
        <member name="M:fyiReporting.RDL.FunctionUserCollection.#ctor(System.Collections.IDictionary,fyiReporting.RDL.IExpr)">
            <summary>
            obtain value of Field
            </summary>
        </member>
        <member name="T:fyiReporting.RDL.FunctionUserID">
            <summary>
            User ID- Report.UserID must be set by the client to be accurate in multi-user case
            </summary>
        </member>
        <member name="M:fyiReporting.RDL.FunctionUserID.#ctor">
            <summary>
            Client user id
            </summary>
        </member>
        <member name="T:fyiReporting.RDL.FunctionUserLanguage">
            <summary>
            The Language field in the User collection.
            </summary>
        </member>
        <member name="M:fyiReporting.RDL.FunctionUserLanguage.#ctor">
            <summary>
            Client user language
            </summary>
        </member>
        <member name="T:fyiReporting.RDL.Identifier">
            <summary>
            Identifier
            </summary>
        </member>
        <member name="M:fyiReporting.RDL.Identifier.#ctor(System.String)">
            <summary>
            passed class name, function name, and args for evaluation
            </summary>
        </member>
        <member name="T:fyiReporting.RDL.IdentifierKeyEnum">
            <summary>
            IdentifierKey
            </summary>
        </member>
        <member name="F:fyiReporting.RDL.IdentifierKeyEnum.Recursive">
            <summary>
            Recursive
            </summary>
        </member>
        <member name="F:fyiReporting.RDL.IdentifierKeyEnum.Simple">
            <summary>
            Simple
            </summary>
        </member>
        <member name="M:fyiReporting.RDL.IdentifierKey.#ctor(fyiReporting.RDL.IdentifierKeyEnum)">
            <summary>
            
            </summary>
        </member>
        <member name="T:fyiReporting.RDL.VBFunctions">
            <summary>
            The VBFunctions class holds a number of static functions for support VB functions.
            </summary>
        </member>
        <member name="M:fyiReporting.RDL.VBFunctions.Year(System.DateTime)">
            <summary>
            Obtains the year
            </summary>
            <param name="dt"></param>
            <returns>int year</returns>
        </member>
        <member name="M:fyiReporting.RDL.VBFunctions.Weekday(System.DateTime)">
            <summary>
            Returns the integer day of week: 1=Sunday, 2=Monday, ..., 7=Saturday
            </summary>
            <param name="dt"></param>
            <returns></returns>
        </member>
        <member name="M:fyiReporting.RDL.VBFunctions.WeekdayName(System.Int32)">
            <summary>
            Returns the name of the day of week
            </summary>
            <param name="d"></param>
            <returns></returns>
        </member>
        <member name="M:fyiReporting.RDL.VBFunctions.WeekdayName(System.Int32,System.Boolean)">
            <summary>
            Returns the name of the day of week
            </summary>
            <param name="d"></param>
            <param name="bAbbreviation">true for abbreviated name</param>
            <returns></returns>
        </member>
        <member name="M:fyiReporting.RDL.VBFunctions.Day(System.DateTime)">
            <summary>
            Get the day of the month.
            </summary>
            <param name="dt"></param>
            <returns></returns>
        </member>
        <member name="M:fyiReporting.RDL.VBFunctions.Month(System.DateTime)">
            <summary>
            Gets the integer month
            </summary>
            <param name="dt"></param>
            <returns></returns>
        </member>
        <member name="M:fyiReporting.RDL.VBFunctions.MonthName(System.Int32)">
            <summary>
            Get the month name
            </summary>
            <param name="m"></param>
            <returns></returns>
        </member>
        <member name="M:fyiReporting.RDL.VBFunctions.MonthName(System.Int32,System.Boolean)">
            <summary>
            Gets the month name; optionally abbreviated
            </summary>
            <param name="m"></param>
            <param name="bAbbreviation"></param>
            <returns></returns>
        </member>
        <member name="M:fyiReporting.RDL.VBFunctions.Hour(System.DateTime)">
            <summary>
            Gets the hour
            </summary>
            <param name="dt"></param>
            <returns></returns>
        </member>
        <member name="M:fyiReporting.RDL.VBFunctions.Minute(System.DateTime)">
            <summary>
            Get the minute
            </summary>
            <param name="dt"></param>
            <returns></returns>
        </member>
        <member name="M:fyiReporting.RDL.VBFunctions.Second(System.DateTime)">
            <summary>
            Get the second
            </summary>
            <param name="dt"></param>
            <returns></returns>
        </member>
        <member name="M:fyiReporting.RDL.VBFunctions.Today">
            <summary>
            Gets the current local date on this computer
            </summary>
            <returns></returns>
        </member>
        <member name="M:fyiReporting.RDL.VBFunctions.Asc(System.String)">
            <summary>
            Converts the first letter in a string to ANSI code 
            </summary>
            <param name="o"></param>
            <returns></returns>
        </member>
        <member name="M:fyiReporting.RDL.VBFunctions.CBool(System.Object)">
            <summary>
            Converts an expression to Boolean  
            </summary>
            <param name="o"></param>
            <returns></returns>
        </member>
        <member name="M:fyiReporting.RDL.VBFunctions.CByte(System.String)">
            <summary>
            Converts an expression to type Byte
            </summary>
            <param name="o"></param>
            <returns></returns>
        </member>
        <member name="M:fyiReporting.RDL.VBFunctions.CCur(System.String)">
            <summary>
            Converts an expression to type Currency - really Decimal
            </summary>
            <param name="o"></param>
            <returns></returns>
        </member>
        <member name="M:fyiReporting.RDL.VBFunctions.CDate(System.String)">
            <summary>
            Converts an expression to type Date
            </summary>
            <param name="o"></param>
            <returns></returns>
        </member>
        <member name="M:fyiReporting.RDL.VBFunctions.Chr(System.Int32)">
            <summary>
            Converts the specified ANSI code to a character
            </summary>
            <param name="o"></param>
            <returns></returns>
        </member>
        <member name="M:fyiReporting.RDL.VBFunctions.CInt(System.Object)">
            <summary>
            Converts the expression to integer
            </summary>
            <param name="o"></param>
            <returns></returns>
        </member>
        <member name="M:fyiReporting.RDL.VBFunctions.CLng(System.Object)">
            <summary>
            Converts the expression to long
            </summary>
            <param name="o"></param>
            <returns></returns>
        </member>
        <member name="M:fyiReporting.RDL.VBFunctions.CSng(System.Object)">
            <summary>
            Converts the expression to Single
            </summary>
            <param name="o"></param>
            <returns></returns>
        </member>
        <member name="M:fyiReporting.RDL.VBFunctions.CStr(System.Object)">
            <summary>
            Converts the expression to String
            </summary>
            <param name="o"></param>
            <returns></returns>
        </member>
        <member name="M:fyiReporting.RDL.VBFunctions.Hex(System.Int64)">
            <summary>
            Returns the hexadecimal value of a specified number
            </summary>
            <param name="o"></param>
            <returns></returns>
        </member>
        <member name="M:fyiReporting.RDL.VBFunctions.Oct(System.Int64)">
            <summary>
            Returns the octal value of a specified number
            </summary>
            <param name="o"></param>
            <returns></returns>
        </member>
        <member name="M:fyiReporting.RDL.VBFunctions.CDbl(System.Object)">
            <summary>
            Converts the passed parameter to double
            </summary>
            <param name="o"></param>
            <returns></returns>
        </member>
        <member name="M:fyiReporting.RDL.VBFunctions.DateAdd(System.String,System.Double,System.DateTime)">
            <summary>
            Returns a date to which a specified time interval has been added. 
            </summary>
            <param name="interval">String expression that is the interval you want to add.</param>
            <param name="number">Numeric expression that is the number of interval you want to add. The numeric expression can either be positive, for dates in the future, or negative, for dates in the past.</param>
            <param name="date">The date to which interval is added.</param>
            <returns></returns>
        </member>
        <member name="M:fyiReporting.RDL.VBFunctions.InStr(System.String,System.String)">
            <summary>
            1 based offset of string2 in string1
            </summary>
            <param name="string1"></param>
            <param name="string2"></param>
            <returns></returns>
        </member>
        <member name="M:fyiReporting.RDL.VBFunctions.InStr(System.Int32,System.String,System.String)">
            <summary>
            1 based offset of string2 in string1
            </summary>
            <param name="start"></param>
            <param name="string1"></param>
            <param name="string2"></param>
            <returns></returns>
        </member>
        <member name="M:fyiReporting.RDL.VBFunctions.InStr(System.String,System.String,System.Int32)">
            <summary>
            1 based offset of string2 in string1; optionally case insensitive
            </summary>
            <param name="string1"></param>
            <param name="string2"></param>
            <param name="compare">1 if you want case insensitive compare</param>
            <returns></returns>
        </member>
        <member name="M:fyiReporting.RDL.VBFunctions.InStr(System.Int32,System.String,System.String,System.Int32)">
            <summary>
            1 based offset of string2 in string1; optionally case insensitive
            </summary>
            <param name="start"></param>
            <param name="string1"></param>
            <param name="string2"></param>
            <param name="compare"></param>
            <returns></returns>
        </member>
        <member name="M:fyiReporting.RDL.VBFunctions.InStrRev(System.String,System.String)">
            <summary>
            1 based offset of string2 in string1 starting from end of string
            </summary>
            <param name="string1"></param>
            <param name="string2"></param>
            <returns></returns>
        </member>
        <member name="M:fyiReporting.RDL.VBFunctions.InStrRev(System.String,System.String,System.Int32)">
            <summary>
            1 based offset of string2 in string1 starting from end of string - start
            </summary>
            <param name="string1"></param>
            <param name="string2"></param>
            <param name="start"></param>
            <returns></returns>
        </member>
        <member name="M:fyiReporting.RDL.VBFunctions.InStrRev(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            1 based offset of string2 in string1 starting from end of string - start optionally case insensitive
            </summary>
            <param name="string1"></param>
            <param name="string2"></param>
            <param name="start"></param>
            <param name="compare">1 for case insensitive comparison</param>
            <returns></returns>
        </member>
        <member name="M:fyiReporting.RDL.VBFunctions.IsNumeric(System.Object)">
             <summary>
             IsNumeric returns True if the data type of Expression is Boolean, Byte, Decimal, Double, Integer, Long, 
             SByte, Short, Single, UInteger, ULong, or UShort. 
             It also returns True if Expression is a Char, String, or Object that can be successfully converted to a number.
            
             IsNumeric returns False if Expression is of data type Date. It returns False if Expression is a 
             Char, String, or Object that cannot be successfully converted to a number.
             </summary>
             <param name="v"></param>
             <returns></returns>
        </member>
        <member name="M:fyiReporting.RDL.VBFunctions.LCase(System.String)">
            <summary>
            Returns the lower case of the passed string
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:fyiReporting.RDL.VBFunctions.Left(System.String,System.Int32)">
            <summary>
            Returns the left n characters from the string
            </summary>
            <param name="str"></param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:fyiReporting.RDL.VBFunctions.Len(System.String)">
            <summary>
            Returns the length of the string
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:fyiReporting.RDL.VBFunctions.LTrim(System.String)">
            <summary>
            Removes leading blanks from string
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:fyiReporting.RDL.VBFunctions.Mid(System.String,System.Int32)">
            <summary>
            Returns the portion of the string denoted by the start.
            </summary>
            <param name="str"></param>
            <param name="start">1 based starting position</param>
            <returns></returns>
        </member>
        <member name="M:fyiReporting.RDL.VBFunctions.Mid(System.String,System.Int32,System.Int32)">
            <summary>
            Returns the portion of the string denoted by the start and length.
            </summary>
            <param name="str"></param>
            <param name="start">1 based starting position</param>
            <param name="length">length to extract</param>
            <returns></returns>
        </member>
        <member name="M:fyiReporting.RDL.VBFunctions.Replace(System.String,System.String,System.String)">
            <summary>
            Returns string replacing all instances of the searched for text with the replace text.
            </summary>
            <param name="str"></param>
            <param name="find"></param>
            <param name="replacewith"></param>
            <returns></returns>
        </member>
        <member name="M:fyiReporting.RDL.VBFunctions.Replace(System.String,System.String,System.String,System.Int32)">
            <summary>
            Returns string replacing all instances of the searched for text starting at position 
            start with the replace text.
            </summary>
            <param name="str"></param>
            <param name="find"></param>
            <param name="replacewith"></param>
            <param name="start"></param>
            <returns></returns>
        </member>
        <member name="M:fyiReporting.RDL.VBFunctions.Replace(System.String,System.String,System.String,System.Int32,System.Int32)">
            <summary>
            Returns string replacing 'count' instances of the searched for text starting at position 
            start with the replace text.
            </summary>
            <param name="str"></param>
            <param name="find"></param>
            <param name="replacewith"></param>
            <param name="start"></param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:fyiReporting.RDL.VBFunctions.Replace(System.String,System.String,System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
            Returns string replacing 'count' instances of the searched for text (optionally
            case insensitive) starting at position start with the replace text.
            </summary>
            <param name="str"></param>
            <param name="find"></param>
            <param name="replacewith"></param>
            <param name="start"></param>
            <param name="count"></param>
            <param name="compare">1 for case insensitive search</param>
            <returns></returns>
        </member>
        <member name="M:fyiReporting.RDL.VBFunctions.Right(System.String,System.Int32)">
            <summary>
            Returns the rightmost length of string.
            </summary>
            <param name="str"></param>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:fyiReporting.RDL.VBFunctions.RTrim(System.String)">
            <summary>
            Removes trailing blanks from string.
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:fyiReporting.RDL.VBFunctions.Space(System.Int32)">
            <summary>
            Returns blank string of the specified length
            </summary>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:fyiReporting.RDL.VBFunctions.StrComp(System.String,System.String)">
            <summary>
            Compares the strings. When string1 &lt; string2: -1, string1 = string2: 0, string1 > string2: 1 
            </summary>
            <param name="string1"></param>
            <param name="string2"></param>
            <returns></returns>
        </member>
        <member name="M:fyiReporting.RDL.VBFunctions.StrComp(System.String,System.String,System.Int32)">
            <summary>
            Compares the strings; optionally with case insensitivity. When string1 &lt; string2: -1, string1 = string2: 0, string1 > string2: 1 
            </summary>
            <param name="string1"></param>
            <param name="string2"></param>
            <param name="compare">1 for case insensitive comparison</param>
            <returns></returns>
        </member>
        <member name="M:fyiReporting.RDL.VBFunctions.String(System.Int32,System.String)">
            <summary>
            Return string with the character repeated for the length
            </summary>
            <param name="length"></param>
            <param name="c"></param>
            <returns></returns>
        </member>
        <member name="M:fyiReporting.RDL.VBFunctions.String(System.Int32,System.Char)">
            <summary>
            Return string with the character repeated for the length
            </summary>
            <param name="length"></param>
            <param name="c"></param>
            <returns></returns>
        </member>
        <member name="M:fyiReporting.RDL.VBFunctions.StrReverse(System.String)">
            <summary>
            Returns a string with the characters reversed.
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:fyiReporting.RDL.VBFunctions.Trim(System.String)">
            <summary>
            Removes whitespace from beginning and end of string.
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:fyiReporting.RDL.VBFunctions.UCase(System.String)">
            <summary>
            Returns the uppercase version of the string 
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:fyiReporting.RDL.VBFunctions.Round(System.Double)">
            <summary>
            Rounds a number to zero decimal places
            </summary>
            <param name="n">Number to round</param>
            <returns></returns>
        </member>
        <member name="M:fyiReporting.RDL.VBFunctions.Round(System.Double,System.Int32)">
            <summary>
            Rounds a number to the specified decimal places
            </summary>
            <param name="n">Number to round</param>
            <param name="decimals">Number of decimal places</param>
            <returns></returns>
        </member>
        <member name="M:fyiReporting.RDL.VBFunctions.Round(System.Decimal)">
            <summary>
            Rounds a number to zero decimal places
            </summary>
            <param name="n">Number to round</param>
            <returns></returns>
        </member>
        <member name="M:fyiReporting.RDL.VBFunctions.Round(System.Decimal,System.Int32)">
            <summary>
            Rounds a number to the specified decimal places
            </summary>
            <param name="n">Number to round</param>
            <param name="decimals">Number of decimal places</param>
            <returns></returns>
        </member>
        <member name="T:fyiReporting.RDL.IStreamGen">
            <summary>
            Interface for obtaining streams for generation of reports
            </summary>
        </member>
        <member name="T:fyiReporting.RDL.MemoryStreamGen">
            <summary>
             An implementation of IStreamGen.  Used for single file with memory stream.
             XML and PDF are the only types that will work with this implementation.
            </summary>
        </member>
        <member name="M:fyiReporting.RDL.MemoryStreamGen.GetIOStream(System.String@,System.String)">
            <summary>
            Createa a new stream and return a Stream caller can then write to.  
            </summary>
            <param name="relativeName">Filled in with a name</param>
            <param name="extension">????</param>
            <returns></returns>
        </member>
        <member name="T:fyiReporting.RDL.MhtBuilder">
             <summary>
             This class builds the following from a URL:
            
               .mht file (Web Archive, single file)
               .htm file with dereferenced (absolute) references (Web Page, HTML Only)
               .htm file plus all referenced files in a local subfolder (Web Page, complete) 
               .txt file (non-HTML contents of Web Page)
            
             The .mht format is based on RFC2557 
                "compliant Multipart MIME Message (mhtml web archive)"
                http://www.ietf.org/rfc/rfc2557.txt
             </summary>
             <remarks>
               Jeff Atwood
               http://www.codinghorror.com/
             </remarks>
        </member>
        <member name="M:fyiReporting.RDL.MhtBuilder.AppendMhtBinaryFile(fyiReporting.RDL.MhtWebFile)">
            <summary>
            Appends a downloaded external binary file to our MhtBuilder using Base64 encoding
            </summary>
        </member>
        <member name="M:fyiReporting.RDL.MhtBuilder.AppendMhtBoundary">
            <summary>
            appends a boundary marker to our MhtBuilder
            </summary>
        </member>
        <member name="M:fyiReporting.RDL.MhtBuilder.AppendMhtFinalBoundary">
            <summary>
            appends a boundary marker to our MhtBuilder
            </summary>
        </member>
        <member name="M:fyiReporting.RDL.MhtBuilder.AppendMhtFile(fyiReporting.RDL.MhtWebFile)">
            <summary>
            Appends a downloaded external file to our MhtBuilder
            </summary>
        </member>
        <member name="M:fyiReporting.RDL.MhtBuilder.AppendMhtFiles">
            <summary>
            appends all downloaded files (from _ExternalFiles) to our MhtBuilder
            </summary>
            <param name="st">type of storage to use when downloading external files</param>
            <param name="storagePath">path to use for downloaded external files</param>
        </member>
        <member name="M:fyiReporting.RDL.MhtBuilder.AppendMhtHeader(fyiReporting.RDL.MhtWebFile)">
            <summary>
            appends the Mht header, which includes the root HTML
            </summary>
        </member>
        <member name="M:fyiReporting.RDL.MhtBuilder.AppendMhtLine">
            <summary>
            append a single line, with trailing CRLF, to our MhtBuilder
            </summary>
        </member>
        <member name="M:fyiReporting.RDL.MhtBuilder.AppendMhtLine(System.String)">
            <summary>
            append a single line, with trailing CRLF, to our MhtBuilder
            </summary>
        </member>
        <member name="M:fyiReporting.RDL.MhtBuilder.AppendMhtTextFile(fyiReporting.RDL.MhtWebFile)">
            <summary>
            Appends a downloaded external text file to our MhtBuilder using Quoted-Printable encoding
            </summary>
        </member>
        <member name="M:fyiReporting.RDL.MhtBuilder.DownloadHtmlFile(System.String)">
            <summary>
            returns the root HTML we'll use to generate everything else;
            this is tracked in the _HtmlFile object, which is always FileStorage.Memory
            </summary>
        </member>
        <member name="M:fyiReporting.RDL.MhtBuilder.FinalizeMht">
            <summary>
            dumps our MhtBuilder as a string and clears it
            </summary>
        </member>
        <member name="M:fyiReporting.RDL.MhtBuilder.FinalizeMht(System.String)">
            <summary>
            dumps our MhtBuilder to disk and clears it
            </summary>
        </member>
        <member name="M:fyiReporting.RDL.MhtBuilder.IsDirectory(System.String)">
            <summary>
            returns true if this path refers to a directory (vs. a filename)
            </summary>
        </member>
        <member name="M:fyiReporting.RDL.MhtBuilder.ValidateFilename(System.String,System.String)">
            <summary>
            ensures that the path, if it contains a filename, matches one of the semicolon delimited 
            filetypes provided in fileExtension
            </summary>
        </member>
        <member name="M:fyiReporting.RDL.MhtBuilder.GetPageArchive">
            <summary>
            Generates a string representation of the current URL as a Mht archive file
            using exclusively in-memory storage
            </summary>
            <returns>string representation of MHT file</returns>
        </member>
        <member name="M:fyiReporting.RDL.MhtBuilder.GetPageArchive(System.String)">
            <summary>
            Generates a string representation of the URL as a Mht archive file
            using exclusively in-memory storage
            </summary>
            <param name="url">fully qualified URL you wish to render to Mht</param>
            <returns>string representation of MHT file</returns>
        </member>
        <member name="M:fyiReporting.RDL.MhtBuilder.SavePageArchive(System.String)">
            <summary>
            Saves the current URL to disk as a single file Mht archive
            if a folder is provided instead of a filename, the TITLE tag is used to name the file
            </summary>
            <param name="outputFilePath">path to generate to, or filename to generate</param>
            <param name="st">type of storage to use when generating the Mht archive</param>
            <returns>the complete path of the Mht archive file that was generated</returns>
        </member>
        <member name="M:fyiReporting.RDL.MhtBuilder.SavePageArchive(System.String,System.String)">
            <summary>
            Saves URL to disk as a single file Mht archive
            if a folder is provided instead of a filename, the TITLE tag is used to name the file
            </summary>
            <param name="outputFilePath">path to generate to, or filename to generate</param>
            <param name="st">type of storage to use when generating the Mht archive</param>
            <param name="url">fully qualified URL you wish to save as Mht</param>
            <returns>the complete path of the Mht archive file that was generated</returns>
        </member>
        <member name="M:fyiReporting.RDL.MhtBuilder.QuotedPrintableEncode(System.String,System.Text.Encoding)">
            <summary>
            converts a string into Quoted-Printable encoding
              http://www.freesoft.org/CIE/RFC/1521/6.htm
            </summary>
        </member>
        <member name="P:fyiReporting.RDL.MhtBuilder.AddWebMark">
            <summary>
            Add the "Mark of the web" to retrieved HTML content so it can run 
            locally on Windows XP SP2
            </summary>
            <remarks>
              http://www.microsoft.com/technet/prodtechnol/winxppro/maintain/sp2brows.mspx#XSLTsection133121120120
            </remarks>
        </member>
        <member name="P:fyiReporting.RDL.MhtBuilder.AllowRecursiveFileRetrieval">
            <summary>
            allow recursive retrieval of any embedded HTML (typically IFRAME or FRAME)
            turn off to prevent infinite recursion in the case of pages that reference themselves..
            </summary>
        </member>
        <member name="P:fyiReporting.RDL.MhtBuilder.MhtContentType">
            <summary>
            returns the Mime content-type string designation of a mht file
            </summary>
        </member>
        <member name="P:fyiReporting.RDL.MhtBuilder.StripIframes">
            <summary>
            Strip all &lt;IFRAME&gt; blocks from any retrieved HTML
            </summary>
        </member>
        <member name="P:fyiReporting.RDL.MhtBuilder.StripScripts">
            <summary>
            Strip all &lt;SCRIPT&gt; blocks from any retrieved HTML
            </summary>
        </member>
        <member name="P:fyiReporting.RDL.MhtBuilder.TextEncoding">
            <summary>
            *only* set this if you want to FORCE a specific text encoding for all the HTML pages you're downloading;
            otherwise the text encoding is autodetected, which is generally what you want
            </summary>
        </member>
        <member name="P:fyiReporting.RDL.MhtBuilder.Url">
            <summary>
            Specifies the target Url we want to save
            </summary>
        </member>
        <member name="M:fyiReporting.RDL.MhtWebClientLocal.Clear">
            <summary>
            clears any downloaded content and resets all properties to default values
            </summary>
        </member>
        <member name="M:fyiReporting.RDL.MhtWebClientLocal.ClearDownload">
            <summary>
            clears any downloaded content
            </summary>
        </member>
        <member name="M:fyiReporting.RDL.MhtWebClientLocal.DownloadBytes(System.String)">
            <summary>
            download URL contents to an array of bytes, using HTTP compression if possible
            </summary>
        </member>
        <member name="M:fyiReporting.RDL.MhtWebClientLocal.GetUrlData(System.String)">
            <summary>
            returns a collection of bytes from a Url
            </summary>
            <param name="url">The URL to retrieve</param>
        </member>
        <member name="M:fyiReporting.RDL.MhtWebClientLocal.CharsetToEncoding(System.String)">
            <summary>
            attempt to convert this charset string into a named .NET text encoding
            </summary>
        </member>
        <member name="M:fyiReporting.RDL.MhtWebClientLocal.DetectEncoding(System.String,System.Byte[])">
            <summary>
            try to determine string encoding using Content-Type HTTP header and
            raw HTTP content bytes
            "Content-Type: text/html; charset=us-ascii"
            &lt;meta http-equiv="Content-Type" content="text/html; charset=utf-8"/&gt;
            </summary>
        </member>
        <member name="P:fyiReporting.RDL.MhtWebClientLocal.ContentLocation">
            <summary>
            Returns the actual location of the downloaded content, which can 
            be different than the requested URL, eg, http://web.com/IsThisAfolderOrNot
            </summary>
        </member>
        <member name="P:fyiReporting.RDL.MhtWebClientLocal.DefaultEncoding">
            <summary>
            if the correct string encoding type cannot be detected, or detection is disabled
            this is the default string encoding that will be used.
            </summary>
        </member>
        <member name="P:fyiReporting.RDL.MhtWebClientLocal.DetectedEncoding">
            <summary>
            this is the string encoding that was autodetected from the HTML content
            </summary>
        </member>
        <member name="P:fyiReporting.RDL.MhtWebClientLocal.ForcedEncoding">
            <summary>
            Bypass detection of content encoding and force a specific encoding
            </summary>
        </member>
        <member name="P:fyiReporting.RDL.MhtWebClientLocal.ResponseBytes">
            <summary>
            Returns the raw bytestream representing the last HTTP response data
            </summary>
        </member>
        <member name="P:fyiReporting.RDL.MhtWebClientLocal.ResponseContentType">
            <summary>
            this is the string encoding that was autodetected from the HTML content
            </summary>
        </member>
        <member name="P:fyiReporting.RDL.MhtWebClientLocal.ResponseIsBinary">
            <summary>
            Returns true if the last HTTP response was in a non-text format
            </summary>
        </member>
        <member name="P:fyiReporting.RDL.MhtWebClientLocal.ResponseString">
            <summary>
            Returns a string representation, with encoding, of the last HTTP response data
            </summary>
        </member>
        <member name="T:fyiReporting.RDL.MhtWebClientLocal.ExtendedBinaryReader">
            <summary>
              Extends the <see cref="T:System.IO.BinaryReader"/> class by a <see cref="M:fyiReporting.RDL.MhtWebClientLocal.ExtendedBinaryReader.ReadToEnd"/>
              method that can be used to read a whole file.
            </summary>
            <remarks>
            See http://dotnet.mvps.org/dotnet/faqs/?id=readfile&amp;lang=en
            </remarks>
        </member>
        <member name="M:fyiReporting.RDL.MhtWebClientLocal.ExtendedBinaryReader.#ctor(System.IO.Stream)">
            <summary>
              Creates a new instance of the <c>ExtendedBinaryReader</c> class.
            </summary>
            <param name="Input">A stream.</param>
        </member>
        <member name="M:fyiReporting.RDL.MhtWebClientLocal.ExtendedBinaryReader.#ctor(System.IO.Stream,System.Text.Encoding)">
            <summary>
              Creates a new instance of the <c>ExtendedBinaryReader</c> class.
            </summary>
            <param name="Input">The provided stream.</param>
            <param name="Encoding">The character encoding.</param>
        </member>
        <member name="M:fyiReporting.RDL.MhtWebClientLocal.ExtendedBinaryReader.ReadToEnd">
            <summary>
              Reads the whole data in the base stream and returns it in an
              array of bytes.
            </summary>
            <returns>The streams whole binary data.</returns>
            <remarks>This method use a buffer of 32k.</remarks>
        </member>
        <member name="M:fyiReporting.RDL.MhtWebClientLocal.ExtendedBinaryReader.ReadToEnd(System.Int32)">
            <summary>
              Reads the whole data in the base stream and returns it in an
              array of bytes.
            </summary>
            <param name="initialLength">The initial buffer length.</param>
            <returns>The stream's whole binary data.</returns>
            <remarks>
            Based on an implementation by Jon Skeet [MVP].
            See <see href="http://www.yoda.arachsys.com/csharp/readbinary.html"/>
            </remarks>
        </member>
        <member name="T:fyiReporting.RDL.MhtWebFile">
            <summary>
            represents an external file referenced in our parent HTML at the target URL
            </summary>
        </member>
        <member name="M:fyiReporting.RDL.MhtWebFile.ConvertReferencesToLocal">
            <summary>
            converts all external Html files (gif, jpg, css, etc) to local refs
            external ref:
               &lt;img src="http://mywebsite/myfolder/myimage.gif"&gt;
            into local refs:
               &lt;img src="mypage_files/myimage.gif"&gt;
            </summary>
        </member>
        <member name="M:fyiReporting.RDL.MhtWebFile.Download">
            <summary>
            Download this file from the target URL
            </summary>
        </member>
        <member name="M:fyiReporting.RDL.MhtWebFile.DownloadExternalFiles">
            <summary>
            download ALL externally referenced files in this file's html, not recursively,
            to the default download path for this page
            </summary>
        </member>
        <member name="M:fyiReporting.RDL.MhtWebFile.DownloadExternalFiles(System.Boolean)">
            <summary>
            download ALL externally referenced files in this file's html, potentially recursively,
            to the default download path for this page
            </summary>
        </member>
        <member name="M:fyiReporting.RDL.MhtWebFile.SaveAsTextFile">
            <summary>
            Saves this file to disk as a plain text file
            </summary>
        </member>
        <member name="M:fyiReporting.RDL.MhtWebFile.SaveAsTextFile(System.String)">
            <summary>
            Saves this file to disk as a plain text file, to an arbitrary path
            </summary>
        </member>
        <member name="M:fyiReporting.RDL.MhtWebFile.SaveToFile">
            <summary>
            writes contents of file to DownloadPath, using appropriate encoding as necessary
            </summary>
        </member>
        <member name="M:fyiReporting.RDL.MhtWebFile.SaveToFile(System.String)">
            <summary>
            writes contents of file to DownloadPath, using appropriate encoding as necessary
            </summary>
        </member>
        <member name="M:fyiReporting.RDL.MhtWebFile.ToString">
            <summary>
            Returns a string representation of the data downloaded for this file
            </summary>
        </member>
        <member name="M:fyiReporting.RDL.MhtWebFile.ToTextString(System.Boolean)">
            <summary>
            Returns the plain text representation of the data in this file, 
            stripping out any HTML tags and codes
            </summary>
        </member>
        <member name="M:fyiReporting.RDL.MhtWebFile.AddMatchesToCollection(System.String,System.Text.RegularExpressions.Regex,System.Collections.Specialized.NameValueCollection@)">
            <summary>
            appends key=value named matches in a regular expression
            to a target NameValueCollection
            </summary>
        </member>
        <member name="M:fyiReporting.RDL.MhtWebFile.ConvertRelativeToAbsoluteRefs(System.String)">
            <summary>
            converts all relative url references
               href="myfolder/mypage.htm"
            into absolute url references
               href="http://mywebsite/myfolder/mypage.htm"
            </summary>
        </member>
        <member name="M:fyiReporting.RDL.MhtWebFile.DeriveFilename(System.String,System.String,System.String)">
            <summary>
            if the user passed in a directory, form the filename automatically using the Html title tag
            if the user passed in a filename, make sure the extension matches our desired extension
            </summary>
        </member>
        <member name="M:fyiReporting.RDL.MhtWebFile.DownloadBytes">
            <summary>
            download this file from the target URL;
            place the bytes downloaded in _DownloadedBytes
            if an exception occurs, capture it in _DownloadException
            </summary>
        </member>
        <member name="M:fyiReporting.RDL.MhtWebFile.DownloadExternalFile(System.String,System.String,System.Boolean)">
            <summary>
            Download a single externally referenced file (if we haven't already downloaded it)
            </summary>
        </member>
        <member name="M:fyiReporting.RDL.MhtWebFile.DownloadExternalFiles(System.String,System.Boolean)">
            <summary>
            download ALL externally referenced files in this html, potentially recursively
            to a specific download path
            </summary>
        </member>
        <member name="M:fyiReporting.RDL.MhtWebFile.ExtensionFromContentType">
            <summary>
            if we weren't given a filename extension, infer it from the download
            Content-Type header
            </summary>
            <remarks>
            http://www.utoronto.ca/webdocs/HTMLdocs/Book/Book-3ed/appb/mimetype.html
            </remarks>
        </member>
        <member name="M:fyiReporting.RDL.MhtWebFile.ExternalHtmlFiles">
            <summary>
            returns a name/value collection of all external files referenced in HTML:
            
                "/myfolder/blah.png"
                'http://mywebsite/blah.gif'
                src=blah.jpg  
            
            note that the Key includes the delimiting quotes or parens (if present), but the Value does not
            this is important because the delimiters are used for matching and replacement to make the
            match more specific!
            </summary>
        </member>
        <member name="M:fyiReporting.RDL.MhtWebFile.FilenameFromUrl">
            <summary>
            attempt to get a coherent filename out of the Url
            </summary>
        </member>
        <member name="M:fyiReporting.RDL.MhtWebFile.IsDirectory(System.String)">
            <summary>
            returns true if this path refers to a directory (vs. a filename)
            </summary>
        </member>
        <member name="M:fyiReporting.RDL.MhtWebFile.MakeValidFilename(System.String,System.Boolean)">
            <summary>
            removes all unsafe filesystem characters to form a valid filesystem filename
            </summary>
        </member>
        <member name="M:fyiReporting.RDL.MhtWebFile.ProcessCss(System.String)">
            <summary>
            Pre-process the CSS using global preference settings
            </summary>
        </member>
        <member name="M:fyiReporting.RDL.MhtWebFile.ProcessHtml(System.String)">
            <summary>
            Pre-process the HTML using global preference settings
            </summary>
        </member>
        <member name="M:fyiReporting.RDL.MhtWebFile.ResolveUrl(System.String)">
            <summary>
            fully resolves any relative pathing inside the URL, and other URL oddities
            </summary>
        </member>
        <member name="M:fyiReporting.RDL.MhtWebFile.SaveToFile(System.String,System.Boolean)">
            <summary>
            sets the DownloadPath and writes contents of file, using appropriate encoding as necessary
            </summary>
        </member>
        <member name="M:fyiReporting.RDL.MhtWebFile.StripHtmlTag(System.String,System.String)">
            <summary>
            perform the regex replacement of all &lt;tagName&gt; .. &lt;/tagName&gt; blocks
            </summary>
        </member>
        <member name="P:fyiReporting.RDL.MhtWebFile.ContentType">
            <summary>
            The Content-Type of this file as returned by the server
            </summary>
        </member>
        <member name="P:fyiReporting.RDL.MhtWebFile.DownloadedBytes">
            <summary>
            The raw bytes returned from the server for this file
            </summary>
        </member>
        <member name="P:fyiReporting.RDL.MhtWebFile.DownloadException">
            <summary>
            If not .WasDownloaded, the exception that prevented download is stored here
            </summary>
        </member>
        <member name="P:fyiReporting.RDL.MhtWebFile.DownloadExtension">
            <summary>
            file type extension to use on downloaded file
            this property is only used if the DownloadFilename property does not
            already contain a file extension
            </summary>
        </member>
        <member name="P:fyiReporting.RDL.MhtWebFile.DownloadFilename">
            <summary>
            filename to download this file as
            if no filename is provided, a filename will be auto-generated based on
            the URL; if the UseHtmlTitleAsFilename property is true, then the
            title tag will be used to generate the filename
            </summary>
        </member>
        <member name="P:fyiReporting.RDL.MhtWebFile.DownloadFolder">
            <summary>
            folder to download this file to
            if no folder is provided, the current application folder will be used
            </summary>
        </member>
        <member name="P:fyiReporting.RDL.MhtWebFile.DownloadFolderName">
            <summary>
            the folder name used in the DownloadFolder
            </summary>
        </member>
        <member name="P:fyiReporting.RDL.MhtWebFile.DownloadPath">
            <summary>
            fully qualified path and filename to download this file to
            </summary>
        </member>
        <member name="P:fyiReporting.RDL.MhtWebFile.ExternalFilesFolder">
            <summary>
            If this file has external dependencies, the folder they will be stored on disk
            </summary>
        </member>
        <member name="P:fyiReporting.RDL.MhtWebFile.HtmlTitle">
            <summary>
            If this file is HTML, retrieve the &lt;TITLE&gt; tag from the HTML
            (maximum of 50 characters)
            </summary>
        </member>
        <member name="P:fyiReporting.RDL.MhtWebFile.IsBinary">
            <summary>
            Does this file contain binary data? If not, it must be text data.
            </summary>
        </member>
        <member name="P:fyiReporting.RDL.MhtWebFile.IsCss">
            <summary>
            Is this file CSS content?
            </summary>
        </member>
        <member name="P:fyiReporting.RDL.MhtWebFile.IsHtml">
            <summary>
            Is this file HTML content?
            </summary>
        </member>
        <member name="P:fyiReporting.RDL.MhtWebFile.TextEncoding">
            <summary>
            If this file is text (eg, it isn't binary), the type of text encoding used
            </summary>
        </member>
        <member name="P:fyiReporting.RDL.MhtWebFile.Url">
            <summary>
            The URL target for this file
            </summary>
        </member>
        <member name="P:fyiReporting.RDL.MhtWebFile.UrlContentLocation">
            <summary>
            The Content-Location of this URL as provided by the server,
            only if the URL was not fully qualified;
            eg, http://mywebsite.com/ actually maps to http://mywebsite.com/default.htm 
            </summary>
        </member>
        <member name="P:fyiReporting.RDL.MhtWebFile.UrlFolder">
            <summary>
            The root and folder of the URL, eg, http://mywebsite.com/myfolder
            </summary>
        </member>
        <member name="P:fyiReporting.RDL.MhtWebFile.UrlRoot">
            <summary>
            The root of the URL, eg, http://mywebsite.com/
            </summary>
        </member>
        <member name="P:fyiReporting.RDL.MhtWebFile.UrlUnmodified">
            <summary>
            The unmodified "raw" URL as originally provided
            </summary>
        </member>
        <member name="P:fyiReporting.RDL.MhtWebFile.UseHtmlTitleAsFilename">
            <summary>
            If enabled, will use the first 50 characters of the TITLE tag 
            to form the filename when saved to disk
            </summary>
        </member>
        <member name="P:fyiReporting.RDL.MhtWebFile.WasDownloaded">
            <summary>
            Was this file successfully downloaded via HTTP?
            </summary>
        </member>
        <member name="T:fyiReporting.RDL.OneFileStreamGen">
            <summary>
             An implementation of IStreamGen.  Constructor is passed the name of a
             file.  The first file uses that name.  If subsequant files are needed 
             then a number suffix is generated sequentially.	 e.g. afile.html, afile2.gif,
             afile3.jpeg, ...
            </summary>
        </member>
        <member name="T:fyiReporting.RDL.PdfAnchor">
            <summary>
            Holds the Byte offsets of the objects used in the Pdf Document
            </summary>
        </member>
        <member name="T:fyiReporting.RDL.ObjectList">
            <summary>
            For Adding the Object number and file offset
            </summary>
        </member>
        <member name="T:fyiReporting.RDL.PdfCatalog">
            <summary>
            Models the Catalog dictionary within a pdf file. This is the first created object. 
            It contains references to all other objects within the List of Pdf Objects.
            </summary>
        </member>
        <member name="M:fyiReporting.RDL.PdfCatalog.GetCatalogDict(System.Int32,System.Int32,System.Int64,System.Int32@)">
             <summary>
            Returns the Catalog Dictionary 
             </summary>
             <returns></returns>
        </member>
        <member name="T:fyiReporting.RDL.PdfContent">
             <summary>
            Represents the general content stream in a Pdf Page. 
            This is used only by the PageObjec 
             </summary>
        </member>
        <member name="M:fyiReporting.RDL.PdfContent.SetStream(System.String)">
            <summary>
            Set the Stream of this Content Dict.
            Stream is taken from PdfElements Objects
            </summary>
            <param name="stream"></param>
        </member>
        <member name="M:fyiReporting.RDL.PdfContent.GetContentDict(System.Int64,System.Int32@)">
            <summary>
            Content object
            </summary>
            <summary>
            Get the Content Dictionary
            </summary>
        </member>
        <member name="T:fyiReporting.RDL.PdfElements">
            <summary>
            Different elements in the pdf file
            </summary>
        </member>
        <member name="M:fyiReporting.RDL.PdfElements.AddLine(System.Single,System.Single,System.Single,System.Single,fyiReporting.RDL.StyleInfo)">
            <summary>
            Page line element at the X Y to X2 Y2 position
            </summary>
            <returns></returns>
        </member>
        <member name="M:fyiReporting.RDL.PdfElements.AddLine(System.Single,System.Single,System.Single,System.Single,System.Single,System.Drawing.Color,fyiReporting.RDL.BorderStyleEnum)">
            <summary>
            Page line element at the X Y to X2 Y2 position
            </summary>
            <returns></returns>
        </member>
        <member name="M:fyiReporting.RDL.PdfElements.AddFillRect(System.Single,System.Single,System.Single,System.Single,System.Drawing.Color)">
            <summary>
            Add a filled rectangle
            </summary>
            <returns></returns>
        </member>
        <member name="M:fyiReporting.RDL.PdfElements.AddImage(fyiReporting.RDL.PdfImages,System.String,System.Int32,fyiReporting.RDL.StyleInfo,System.Drawing.Imaging.ImageFormat,System.Single,System.Single,System.Single,System.Single,System.Drawing.RectangleF,System.Byte[],System.Int32,System.Int32,System.String,System.String)">
            <summary>
            Add image to the page.  Adds a new XObject Image and a reference to it.
            </summary>
            <returns>string Image name</returns>
        </member>
        <member name="M:fyiReporting.RDL.PdfElements.AddPolygon(System.Drawing.PointF[],fyiReporting.RDL.StyleInfo,System.String,fyiReporting.RDL.PdfPattern)">
            <summary>
            Page Polygon
            </summary>
            <param name="pts"></param>
            <param name="si"></param>
            <param name="url"></param>
            <param name="patterns"></param>
        </member>
        <member name="M:fyiReporting.RDL.PdfElements.AddRectangle(System.Single,System.Single,System.Single,System.Single,fyiReporting.RDL.StyleInfo,System.String,fyiReporting.RDL.PdfPattern,System.String)">
            <summary>
            Page Rectangle element at the X Y position
            </summary>
            <returns></returns>
        </member>
        <member name="M:fyiReporting.RDL.PdfElements.AddText(System.Single,System.Single,System.Single,System.Single,System.String[],fyiReporting.RDL.StyleInfo,fyiReporting.RDL.PdfFonts,System.Single[],System.Boolean,System.String,System.Boolean,System.String)">
            <summary>
            Page Text element at the X Y position; multiple lines handled
            </summary>
            <returns></returns>
        </member>
        <member name="M:fyiReporting.RDL.PdfElements.EndElements">
            <summary>
            No more elements on the page.
            </summary>
            <returns></returns>
        </member>
        <member name="T:fyiReporting.RDL.PdfFonts">
             <summary>
            Represents the font dictionary used in a pdf page
             </summary>
        </member>
        <member name="M:fyiReporting.RDL.PdfFonts.GetFontDict(System.Int64,System.Int32@)">
            <summary>
            Gets the font entries to be written to the file
            </summary>
            <returns></returns>
        </member>
        <member name="T:fyiReporting.RDL.PdfFontEntry">
             <summary>
            Represents a font entry used in a pdf page
             </summary>
        </member>
        <member name="M:fyiReporting.RDL.PdfFontEntry.#ctor(fyiReporting.RDL.PdfAnchor,System.String,System.String)">
            <summary>
            Create the font Dictionary
            </summary>
        </member>
        <member name="M:fyiReporting.RDL.PdfFontEntry.GetFontDict(System.Int64,System.Int32@)">
            <summary>
            Get the font entry to be written to the file
            </summary>
            <returns></returns>
        </member>
        <member name="T:fyiReporting.RDL.PdfImages">
             <summary>
            Represents the font dictionary used in a pdf page
             </summary>
        </member>
        <member name="M:fyiReporting.RDL.PdfImages.GetImageDict(System.Int64,System.Int32@)">
            <summary>
            Gets the image entries to be written to the file
            </summary>
            <returns></returns>
        </member>
        <member name="T:fyiReporting.RDL.PdfImageEntry">
             <summary>
            Represents a image entry used in a pdf page
             </summary>
        </member>
        <member name="M:fyiReporting.RDL.PdfImageEntry.#ctor(fyiReporting.RDL.PdfAnchor,fyiReporting.RDL.PdfPage,System.Int32,System.String,System.Drawing.Imaging.ImageFormat,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Create the image Dictionary
            </summary>
        </member>
        <member name="T:fyiReporting.RDL.PdfInfo">
             <summary>
            Store information about the document,Title, Author, Company, 
             </summary>
        </member>
        <member name="M:fyiReporting.RDL.PdfInfo.SetInfo(System.String,System.String,System.String,System.String)">
            <summary>
            Fill the Info Dict
            </summary>
        </member>
        <member name="M:fyiReporting.RDL.PdfInfo.GetInfoDict(System.Int64,System.Int32@)">
            <summary>
            Get the Document Information Dictionary
            </summary>
            <returns></returns>
        </member>
        <member name="M:fyiReporting.RDL.PdfInfo.GetDateTime">
            <summary>
            Get Date as Adobe needs ie similar to ISO/IEC 8824 format
            </summary>
            <returns></returns>
        </member>
        <member name="T:fyiReporting.RDL.PdfPageTree">
            <summary>
            The PageTree object contains references to all the pages used within the Pdf.
            All individual pages are referenced through the kids string
            </summary>
        </member>
        <member name="M:fyiReporting.RDL.PdfPageTree.AddPage(System.Int32)">
            <summary>
            Add a page to the Page Tree. ObjNum is the object number of the page to be added.
            pageNum is the page number of the page.
            </summary>
            <param name="objNum"></param>
        </member>
        <member name="M:fyiReporting.RDL.PdfPageTree.GetPageTree(System.Int64,System.Int32@)">
            <summary>
            returns the Page Tree Dictionary
            </summary>
            <returns></returns>
        </member>
        <member name="T:fyiReporting.RDL.PdfPage">
            <summary>
            This class represents individual pages within the pdf. 
            The contents of the page belong to this class
            </summary>
        </member>
        <member name="M:fyiReporting.RDL.PdfPage.CreatePage(System.Int32,fyiReporting.RDL.PdfPageSize)">
            <summary>
            Create The Pdf page
            </summary>
        </member>
        <member name="M:fyiReporting.RDL.PdfPage.AddResource(fyiReporting.RDL.PdfPattern,System.Int32)">
            <summary>
            Add Pattern Resources to the pdf page
            </summary>
        </member>
        <member name="M:fyiReporting.RDL.PdfPage.AddResource(fyiReporting.RDL.PdfFonts,System.Int32)">
            <summary>
            Add Font Resources to the pdf page
            </summary>
        </member>
        <member name="M:fyiReporting.RDL.PdfPage.AddResource(fyiReporting.RDL.PdfImageEntry,System.Int32)">
            <summary>
            Add Image Resources to the pdf page
            </summary>
        </member>
        <member name="M:fyiReporting.RDL.PdfPage.GetPageDict(System.Int64,System.Int32@)">
            <summary>
            Get the Page Dictionary to be written to the file
            </summary>
            <returns></returns>
        </member>
        <member name="T:fyiReporting.RDL.PdfPageSize">
            <summary>
            Specify the page size in 1/72 inches units.
            </summary>
        </member>
        <member name="T:fyiReporting.RDL.PdfUtility">
            <summary>
            This class contains general Utility for the creation of pdf
            Creates the Header
            Creates XrefTable
            Creates the Trailer
            </summary>
        </member>
        <member name="M:fyiReporting.RDL.PdfUtility.CreateXrefTable(System.Int64,System.Int32@)">
            <summary>
            Creates the xref table using the byte offsets in the array.
            </summary>
            <returns></returns>
        </member>
        <member name="M:fyiReporting.RDL.PdfUtility.GetHeader(System.String,System.Int32@)">
            <summary>
            Returns the Header
            </summary>
            <param name="version"></param>
            <param name="size"></param>
            <returns></returns>
        </member>
        <member name="M:fyiReporting.RDL.PdfUtility.GetTrailer(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Creates the trailer and return the bytes array
            </summary>
            <returns></returns>
        </member>
        <member name="M:fyiReporting.RDL.PdfUtility.GetUTF8Bytes(System.String,System.Int32@)">
            <summary>
            Converts the string to byte array in utf 8 encoding
            </summary>
            <param name="str"></param>
            <param name="size"></param>
            <returns></returns>
        </member>
        <member name="M:fyiReporting.RDL.PdfUtility.UTF16StringQuoter(System.String)">
             If necessary, encodes characters in a string in UTF-16, with a
             starting 0xfe 0xff marker. This is the flag within a PDF string to
             interpret the byte sequence as a string of UTF-16-encoded
             characters. If the String contains no characters outside the
             Unicode U+0000 � U+00ff range, no UTF-16 transformation is needed,
             and we simply return the same String, with the exception that some
             characters are quoted, as required by PDF, and any non-prinable
             US-ASCII characters are encoded as escaped octals.
            
             While this method performs a form of UTF-16 encoding, it is a
             particular quoted form intended for use in FDF/PDF documents. The
             returned String will contain only characters in the range U+0020
             through U+007D. It is intended that only the lower octet of each
             character be used for output into the FDF document.
            
             Also note that this method is intended to process an entire PDF
             string at once. That is, you should pass it the entire PDF string,
             from the first character after the opening paren through the last
             character immediately before the closing paren. This is because it
             may UTF-16-encode the string, which PDF requires must be done on a
             whole string at a time.
            
             @param baseString The string before any escaping has been
             performed.
            
             @return 'baseString' encoded as needed.
        </member>
        <member name="M:fyiReporting.RDL.PdfUtility.appendQuotedOctet(System.Text.StringBuilder,System.Byte)">
             Append to the specified StringBuffer the octet value, quoted
             appropriately for inclusion in an FDF (PDF) document. The
             algorithm used here is intended to match the observed behavior in
             Adobe Acrobat itself. That is, the octet is represented as a
             backslash-escaped octal value if it is a non-printable ASCII
             character, otherwise it is represented as a literal character,
             unless it is one of \, (, or ), in which case it is
             backslash-escaped.
            
             We take an octet, here, rather than a character, since escaping
             occurs a byte at a time. If you need to encode a character whose
             Unicode value is greater than U+00ff, then you'll need to break the
             character into byte-sized chunks, first (and you'll presumably need
             to encode the entire String as UTF-16).
            
             @param buffer The StringBuffer to which the
             appropriately-escaped character will be
             appended.
             @param octet The octet to be quoted and appended.
        </member>
        <member name="M:fyiReporting.RDL.PdfUtility.escapeOctetOctal(System.Byte)">
             Return a string which contains the backslash-escaped octal
             representation of the provided octet. For example, the octet 0x43,
             which might represent the ASCII character 'C', would be returned as
             "\103".
            
             @param octet The octet to be quoted.
            
             @return The backslash-escaped octal representation of 'octet'.
        </member>
        <member name="T:fyiReporting.RDL.OutputPresentationType">
            <summary>
            The primary class to "run" a report to the supported output presentation types
            </summary>
        </member>
        <member name="T:fyiReporting.RDL.RenderHtml">
            <summary>
             Renders a report to HTML.   This handles some page formating but does not do true page formatting.
            </summary>
        </member>
        <member name="T:fyiReporting.RDL.RenderPdf">
            <summary>
             Renders a report to PDF.   This is a page oriented formatting renderer.
            </summary>
        </member>
        <member name="F:fyiReporting.RDL.RenderPdf.BaseFonts">
            <summary>
            List itextSharp Basefont added
            </summary>
        </member>
        <member name="F:fyiReporting.RDL.RenderPdf.BaseFontsname">
            <summary>
            List font name
            </summary>
        </member>
        <member name="M:fyiReporting.RDL.RenderPdf.iAddLine(System.Single,System.Single,System.Single,System.Single,fyiReporting.RDL.StyleInfo)">
            <summary>
            Page line element at the X Y to X2 Y2 position
            </summary>
            <returns></returns>
        </member>
        <member name="M:fyiReporting.RDL.RenderPdf.iAddLine(System.Single,System.Single,System.Single,System.Single,System.Single,System.Drawing.Color,fyiReporting.RDL.BorderStyleEnum)">
            <summary>
            Page line element at the X Y to X2 Y2 position
            </summary>
            <returns></returns>
        </member>
        <member name="M:fyiReporting.RDL.RenderPdf.iAddFillRect(System.Single,System.Single,System.Single,System.Single,System.Drawing.Color)">
            <summary>
            Add a filled rectangle
            </summary>
            <returns></returns>
        </member>
        <member name="M:fyiReporting.RDL.RenderPdf.iAddBorder(fyiReporting.RDL.StyleInfo,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Add border
            </summary>
        </member>
        <member name="M:fyiReporting.RDL.RenderPdf.iAddImage(fyiReporting.RDL.PdfImages,System.String,System.Int32,fyiReporting.RDL.StyleInfo,System.Drawing.Imaging.ImageFormat,System.Single,System.Single,System.Single,System.Single,System.Drawing.RectangleF,System.Byte[],System.Int32,System.Int32,System.String,System.String)">
            <summary>
            Add image to the page.
            </summary>
            <returns>string Image name</returns>
        </member>
        <member name="M:fyiReporting.RDL.RenderPdf.iAddPolygon(System.Drawing.PointF[],fyiReporting.RDL.StyleInfo,System.String,fyiReporting.RDL.PdfPattern)">
            <summary>
            Page Polygon
            </summary>
            <param name="pts"></param>
            <param name="si"></param>
            <param name="url"></param>
            <param name="patterns"></param>
        </member>
        <member name="M:fyiReporting.RDL.RenderPdf.iAddRectangle(System.Single,System.Single,System.Single,System.Single,fyiReporting.RDL.StyleInfo,System.String,fyiReporting.RDL.PdfPattern,System.String)">
            <summary>
            Page Rectangle element at the X Y position
            </summary>
            <returns></returns>
        </member>
        <member name="M:fyiReporting.RDL.RenderPdf.iAddPie(System.Single,System.Single,System.Single,System.Single,fyiReporting.RDL.StyleInfo,System.String,fyiReporting.RDL.PdfPattern,System.String)">
            <summary>
            Draw a pie
            </summary>
            <returns></returns>
        </member>
        <member name="M:fyiReporting.RDL.RenderPdf.iAddCurve(System.Drawing.PointF[],fyiReporting.RDL.StyleInfo)">
            <summary>
            Draw a curve
            </summary>
            <returns></returns>
        </member>
        <member name="M:fyiReporting.RDL.RenderPdf.iFontNameNormalize(System.String)">
            <summary>
            Font name , for my application almost fonts  will be unicode and embedded
            </summary>
            <returns></returns>
        </member>
        <member name="M:fyiReporting.RDL.RenderPdf.iAddText(System.Single,System.Single,System.Single,System.Single,System.String[],fyiReporting.RDL.StyleInfo,fyiReporting.RDL.PdfFonts,System.Single[],System.Boolean,System.String,System.Boolean,System.String)">
            <summary>
            Page Text element at the X Y position; multiple lines handled
            </summary>
            <returns></returns>
        </member>
        <member name="M:fyiReporting.RDL.RenderPdf.MeasureString(System.String,System.Drawing.Graphics,System.Drawing.Font,System.Drawing.StringFormat,System.Drawing.CharacterRange[])">
            <summary>
            Measures the location of an arbritrary # of words within a string
            </summary>
        </member>
        <member name="M:fyiReporting.RDL.RenderPdf.MeasureString32(System.String,System.Drawing.Graphics,System.Drawing.Font,System.Drawing.StringFormat,System.Drawing.CharacterRange[])">
            <summary>
            Measures the location of words within a string;  limited by .Net 1.1 to 32 words
             MEASUREMAX is a constant that defines that limit
            </summary>
            <param name="s"></param>
            <param name="g"></param>
            <param name="drawFont"></param>
            <param name="drawFormat"></param>
            <param name="cra"></param>
            <returns></returns>
        </member>
        <member name="P:fyiReporting.RDL.RenderPdf.FontFolder">
            <summary> 
            Default I get embedded fonts in Fonts folder in current 
            folder RdlEngine.dll in, can set font folder here 
            </summary> 
        </member>
        <member name="T:fyiReporting.RDL.RenderXml">
            <summary>
            The primary class to "run" a report to XML
            </summary>
        </member>
        <member name="T:fyiReporting.RDL.StreamGen">
            <summary>
             An implementation of IStreamGen.  Constructor is passed the name of a
             directory to place work files and the primary name of resultant file.  
            </summary>
        </member>
        <member name="T:fyiReporting.RDL.DataSet">
            <summary>
             Runtime Information about a set of data; public interface to the definition
            </summary>
        </member>
        <member name="T:fyiReporting.RDL.DataSets">
            <summary>
             The sets of data (defined by DataSet) that are retrieved as part of the Report.
            </summary>
        </member>
        <member name="T:fyiReporting.RDL.DataSource">
            <summary>
             Information about the data source (e.g. a database connection string).
            </summary>
        </member>
        <member name="P:fyiReporting.RDL.DataSource.UserConnection">
            <summary>
            Get/Set the database connection.  User must handle closing of connection.
            </summary>
        </member>
        <member name="T:fyiReporting.RDL.DataSources">
            <summary>
             Contains list of DataSource about how to connect to sources of data used by the DataSets.
            </summary>
        </member>
        <member name="T:fyiReporting.RDL.ICustomReportItem">
            <summary>
            ICustomReportItem defines the protocol for implementing a CustomReportItem
            </summary>
        </member>
        <member name="T:fyiReporting.RDL.Pages">
            <summary>
             Represents all the pages of a report.  Needed when you need
             render based on pages.  e.g. PDF
            </summary>
        </member>
        <member name="M:fyiReporting.RDL.Pages.CleanUp">
            <summary>
            CleanUp should be called after every render to reduce resource utilization.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:fyiReporting.RDL.PageTextHtml" -->
        <member name="M:fyiReporting.RDL.PageTextHtml.Reset">
            <summary>
            Reset will force a recalculation of the embedded PageItems;
            </summary>
        </member>
        <member name="T:fyiReporting.RDL.PageTextHtmlLexer">
            <summary>
            A simple lexer that is used by PageTextHtml to break an HTML string into components.
            </summary>
        </member>
        <member name="M:fyiReporting.RDL.PageTextHtmlLexer.#ctor(System.String)">
            <summary>
            Initializes a new instance of the Lexer class with the specified
            TextReader to lex.
            </summary>
            <param name="source">A TextReader to lex.</param>
        </member>
        <member name="M:fyiReporting.RDL.PageTextHtmlLexer.Lex">
            <summary>
            Breaks the input stream onto the tokens list and returns it.
            </summary>
            <returns>The tokens list.</returns>
        </member>
        <member name="M:fyiReporting.RDL.PageTextHtmlLexer.IsHtmlComment">
            <summary>
            Determine if HTML is part of a comment.   Donated by jonh of the forum
            </summary>
            <returns></returns>
        </member>
        <member name="M:fyiReporting.RDL.PageTextHtmlLexer.CharReader.#ctor(System.String)">
            <summary>
            Initializes a new instance of the CharReader class.
            </summary>
        </member>
        <member name="M:fyiReporting.RDL.PageTextHtmlLexer.CharReader.GetNext">
            <summary>
            Returns the next char from the stream.
            </summary>
        </member>
        <member name="M:fyiReporting.RDL.PageTextHtmlLexer.CharReader.Peek">
            <summary>
            Returns the next char from the stream without removing it.
            </summary>
        </member>
        <member name="M:fyiReporting.RDL.PageTextHtmlLexer.CharReader.UnGet">
            <summary>
            Undoes the extracting of the last char.
            </summary>
        </member>
        <member name="M:fyiReporting.RDL.PageTextHtmlLexer.CharReader.EndOfInput">
            <summary>
            Returns True if end of input was reached; otherwise False.
            </summary>
        </member>
        <member name="T:fyiReporting.RDL.RdlEngineConfig">
            <summary> 
             Handle SQL configuration and connections 
            </summary> 
        </member>
        <member name="M:fyiReporting.RDL.CompressionConfig.adler(System.Byte[])">
            <summary> 
            Adler 32 checksum routine comes from http://en.wikipedia.org/wiki/Adler-32 
            </summary> 
            <param name="cmpData"></param> 
            <returns></returns> 
        </member>
        <member name="T:fyiReporting.RDL.Report">
            <summary>
             Main Report definition; this is the top of the tree that contains the complete
             definition of a instance of a report.
            </summary>
        </member>
        <member name="M:fyiReporting.RDL.Report.#ctor(fyiReporting.RDL.ReportDefn)">
            <summary>
            Construct a runtime Report object using the compiled report definition.
            </summary>
            <param name="r"></param>
        </member>
        <member name="M:fyiReporting.RDL.Report.RunGetData(System.Collections.IDictionary)">
            <summary>
            Read all the DataSets in the report
            </summary>
            <param name="parms"></param>
        </member>
        <member name="M:fyiReporting.RDL.Report.RunRender(fyiReporting.RDL.IStreamGen,fyiReporting.RDL.OutputPresentationType)">
            <summary>
            Renders the report using the requested presentation type.
            </summary>
            <param name="sg">IStreamGen for generating result stream</param>
            <param name="type">Presentation type: HTML, XML, PDF, or ASP compatible HTML</param>
        </member>
        <member name="M:fyiReporting.RDL.Report.RunRender(fyiReporting.RDL.IStreamGen,fyiReporting.RDL.OutputPresentationType,System.String)">
            <summary>
            Renders the report using the requested presentation type.
            </summary>
            <param name="sg">IStreamGen for generating result stream</param>
            <param name="type">Presentation type: HTML, XML, PDF, MHT, or ASP compatible HTML</param>
            <param name="prefix">For HTML puts prefix allowing unique name generation</param>
        </member>
        <member name="M:fyiReporting.RDL.Report.RunRenderPdf(fyiReporting.RDL.IStreamGen,fyiReporting.RDL.Pages)">
            <summary>
            RunRenderPdf will render a Pdf given the page structure
            </summary>
            <param name="sg"></param>
            <param name="pgs"></param>
        </member>
        <member name="M:fyiReporting.RDL.Report.RunRenderTif(fyiReporting.RDL.IStreamGen,fyiReporting.RDL.Pages,System.Boolean)">
            <summary>
            RunRenderTif will render a TIF given the page structure
            </summary>
            <param name="sg"></param>
            <param name="pgs"></param>
        </member>
        <member name="M:fyiReporting.RDL.Report.BuildPages">
            <summary>
            Build the Pages for this report.
            </summary>
            <returns></returns>
        </member>
        <member name="M:fyiReporting.RDL.Report.ErrorReset">
            <summary>
            Clear all errors generated up to now.
            </summary>
        </member>
        <member name="P:fyiReporting.RDL.Report.ItextPDF">
            <summary> 
             True: Renderpdf will use Add elements by itextsharp code; 
             False : Render pdf by the old way if my code gets error or don't need font embedded. 
            </summary> 
        </member>
        <member name="E:fyiReporting.RDL.Report.SubreportDataRetrieval">
            <summary>
            Event invoked just prior to obtaining data for the subreport.  Setting DataSet 
            and DataConnection information during this event affects only this instance
            of the Subreport.
            </summary>
        </member>
        <member name="P:fyiReporting.RDL.Report.UserReportParameters">
            <summary>
            User provided parameters to the report.  IEnumerable is a list of UserReportParameter.
            </summary>
        </member>
        <member name="P:fyiReporting.RDL.Report.Folder">
            <summary>
            Get/Set the folder containing the report.
            </summary>
        </member>
        <member name="P:fyiReporting.RDL.Report.Name">
            <summary>
            Get/Set the report name.  Usually this is the file name of the report sans extension.
            </summary>
        </member>
        <member name="P:fyiReporting.RDL.Report.PageHeightPoints">
            <summary>
            Returns the height of the page in points.
            </summary>
        </member>
        <member name="P:fyiReporting.RDL.Report.PageWidthPoints">
            <summary>
            Returns the width of the page in points.
            </summary>
        </member>
        <member name="P:fyiReporting.RDL.Report.LeftMarginPoints">
            <summary>
            Returns the left margin size in points.
            </summary>
        </member>
        <member name="P:fyiReporting.RDL.Report.RightMarginPoints">
            <summary>
            Returns the right margin size in points.
            </summary>
        </member>
        <member name="P:fyiReporting.RDL.Report.TopMarginPoints">
            <summary>
            Returns the top margin size in points.
            </summary>
        </member>
        <member name="P:fyiReporting.RDL.Report.BottomMarginPoints">
            <summary>
            Returns the bottom margin size in points.
            </summary>
        </member>
        <member name="P:fyiReporting.RDL.Report.ErrorMaxSeverity">
            <summary>
            Returns the maximum severity of any error.  4 or less indicating report continues running.
            </summary>
        </member>
        <member name="P:fyiReporting.RDL.Report.ErrorItems">
            <summary>
            List of errors encountered so far.
            </summary>
        </member>
        <member name="P:fyiReporting.RDL.Report.UserID">
            <summary>
            Get/Set the UserID, that is the running user.
            </summary>
        </member>
        <member name="P:fyiReporting.RDL.Report.ClientLanguage">
            <summary>
            Get/Set the three letter ISO language of the client of the report.
            </summary>
        </member>
        <member name="T:fyiReporting.RDL.StyleInfo">
            <summary>
             StyleInfo (borders, fonts, background, padding, ...)
            </summary>
        </member>
        <member name="F:fyiReporting.RDL.StyleInfo.BColorLeft">
            <summary>
            Color of the left border
            </summary>
        </member>
        <member name="F:fyiReporting.RDL.StyleInfo.BColorRight">
            <summary>
            Color of the right border
            </summary>
        </member>
        <member name="F:fyiReporting.RDL.StyleInfo.BColorTop">
            <summary>
            Color of the top border
            </summary>
        </member>
        <member name="F:fyiReporting.RDL.StyleInfo.BColorBottom">
            <summary>
            Color of the bottom border
            </summary>
        </member>
        <member name="F:fyiReporting.RDL.StyleInfo.BStyleLeft">
            <summary>
            Style of the left border
            </summary>
        </member>
        <member name="F:fyiReporting.RDL.StyleInfo.BStyleRight">
            <summary>
            Style of the left border
            </summary>
        </member>
        <member name="F:fyiReporting.RDL.StyleInfo.BStyleTop">
            <summary>
            Style of the top border
            </summary>
        </member>
        <member name="F:fyiReporting.RDL.StyleInfo.BStyleBottom">
            <summary>
            Style of the bottom border
            </summary>
        </member>
        <member name="F:fyiReporting.RDL.StyleInfo.BWidthLeft">
            <summary>
            Width of the left border. Max: 20 pt Min: 0.25 pt
            </summary>
        </member>
        <member name="F:fyiReporting.RDL.StyleInfo.BWidthRight">
            <summary>
            Width of the right border. Max: 20 pt Min: 0.25 pt
            </summary>
        </member>
        <member name="F:fyiReporting.RDL.StyleInfo.BWidthTop">
            <summary>
            Width of the right border. Max: 20 pt Min: 0.25 pt
            </summary>
        </member>
        <member name="F:fyiReporting.RDL.StyleInfo.BWidthBottom">
            <summary>
            Width of the bottom border. Max: 20 pt Min: 0.25 pt
            </summary>
        </member>
        <member name="F:fyiReporting.RDL.StyleInfo.BackgroundColor">
            <summary>
            Color of the background
            </summary>
        </member>
        <member name="F:fyiReporting.RDL.StyleInfo.BackgroundGradientType">
            <summary>
            The type of background gradient
            </summary>
        </member>
        <member name="F:fyiReporting.RDL.StyleInfo.PatternType">
            <summary>
            The type of background pattern
            </summary>
        </member>
        <member name="F:fyiReporting.RDL.StyleInfo.BackgroundImage">
            <summary>
            A background image for the report item.
            </summary>
        </member>
        <member name="F:fyiReporting.RDL.StyleInfo.FontStyle">
            <summary>
            Font style Default: Normal
            </summary>
        </member>
        <member name="F:fyiReporting.RDL.StyleInfo._FontFamily">
            <summary>
            Name of the font family Default: Arial
            </summary>
        </member>
        <member name="F:fyiReporting.RDL.StyleInfo.FontSize">
            <summary>
            Point size of the font
            </summary>
        </member>
        <member name="F:fyiReporting.RDL.StyleInfo.FontWeight">
            <summary>
            Thickness of the font
            </summary>
        </member>
        <member name="F:fyiReporting.RDL.StyleInfo._Format">
            <summary>
            Cell format in Excel07  Default: General
            </summary>
        </member>
        <member name="F:fyiReporting.RDL.StyleInfo.TextDecoration">
            <summary>
            Special text formatting Default: none
            </summary>
        </member>
        <member name="F:fyiReporting.RDL.StyleInfo.TextAlign">
            <summary>
            Horizontal alignment of the text Default: General
            </summary>
        </member>
        <member name="F:fyiReporting.RDL.StyleInfo.VerticalAlign">
            <summary>
            Vertical alignment of the text Default: Top
            </summary>
        </member>
        <member name="F:fyiReporting.RDL.StyleInfo.Color">
            <summary>
            The foreground color	Default: Black
            </summary>
        </member>
        <member name="F:fyiReporting.RDL.StyleInfo.PaddingLeft">
            <summary>
            Padding between the left edge of the report item.
            </summary>
        </member>
        <member name="F:fyiReporting.RDL.StyleInfo.PaddingRight">
            <summary>
            Padding between the right edge of the report item.
            </summary>
        </member>
        <member name="F:fyiReporting.RDL.StyleInfo.PaddingTop">
            <summary>
            Padding between the top edge of the report item.
            </summary>
        </member>
        <member name="F:fyiReporting.RDL.StyleInfo.PaddingBottom">
            <summary>
            Padding between the bottom edge of the report item.
            </summary>
        </member>
        <member name="F:fyiReporting.RDL.StyleInfo.LineHeight">
            <summary>
            Height of a line of text.
            </summary>
        </member>
        <member name="F:fyiReporting.RDL.StyleInfo.Direction">
            <summary>
            Indicates whether text is written left-to-right (default)
            </summary>
        </member>
        <member name="F:fyiReporting.RDL.StyleInfo.WritingMode">
            <summary>
            Indicates the writing mode; e.g. left right top bottom or top bottom left right.
            </summary>
        </member>
        <member name="F:fyiReporting.RDL.StyleInfo.Language">
            <summary>
            The primary language of the text.
            </summary>
        </member>
        <member name="F:fyiReporting.RDL.StyleInfo.UnicodeBiDirectional">
            <summary>
            Unused.
            </summary>
        </member>
        <member name="F:fyiReporting.RDL.StyleInfo.Calendar">
            <summary>
            Calendar to use.
            </summary>
        </member>
        <member name="F:fyiReporting.RDL.StyleInfo.NumeralLanguage">
            <summary>
            The digit format to use.
            </summary>
        </member>
        <member name="F:fyiReporting.RDL.StyleInfo.NumeralVariant">
            <summary>
            The variant of the digit format to use.
            </summary>
        </member>
        <member name="M:fyiReporting.RDL.StyleInfo.#ctor">
            <summary>
            Constructor using all defaults for the style.
            </summary>
        </member>
        <member name="M:fyiReporting.RDL.StyleInfo.GetFontFamily">
            <summary>
            Gets the FontFamily instance using the FontFamily string.  This supports lists of fonts.
            </summary>
            <returns></returns>
        </member>
        <member name="M:fyiReporting.RDL.StyleInfo.GetFontFamily(System.String)">
            <summary>
            Gets the FontFamily instance using the passed face name.  This supports lists of fonts.
            </summary>
            <returns></returns>
        </member>
        <member name="M:fyiReporting.RDL.StyleInfo.IsFontBold">
            <summary>
            True if font is bold.
            </summary>
            <returns></returns>
        </member>
        <member name="M:fyiReporting.RDL.StyleInfo.GetFontWeight(System.String,fyiReporting.RDL.FontWeightEnum)">
            <summary>
            Gets the enumerated font weight.
            </summary>
            <param name="v"></param>
            <param name="def"></param>
            <returns></returns>
        </member>
        <member name="M:fyiReporting.RDL.StyleInfo.GetFontStyle(System.String,fyiReporting.RDL.FontStyleEnum)">
            <summary>
            Returns the font style (normal or italic).
            </summary>
            <param name="v"></param>
            <param name="def"></param>
            <returns></returns>
        </member>
        <member name="M:fyiReporting.RDL.StyleInfo.GetBackgroundGradientType(System.String,fyiReporting.RDL.BackgroundGradientTypeEnum)">
            <summary>
            Gets the background gradient type.
            </summary>
            <param name="v"></param>
            <param name="def"></param>
            <returns></returns>
        </member>
        <member name="M:fyiReporting.RDL.StyleInfo.GetTextDecoration(System.String,fyiReporting.RDL.TextDecorationEnum)">
            <summary>
            Gets the text decoration.
            </summary>
            <param name="v"></param>
            <param name="def"></param>
            <returns></returns>
        </member>
        <member name="M:fyiReporting.RDL.StyleInfo.GetTextAlign(System.String,fyiReporting.RDL.TextAlignEnum)">
            <summary>
            Gets the text alignment.
            </summary>
            <param name="v"></param>
            <param name="def"></param>
            <returns></returns>
        </member>
        <member name="M:fyiReporting.RDL.StyleInfo.GetVerticalAlign(System.String,fyiReporting.RDL.VerticalAlignEnum)">
            <summary>
            Gets the vertical alignment.
            </summary>
            <param name="v"></param>
            <param name="def"></param>
            <returns></returns>
        </member>
        <member name="M:fyiReporting.RDL.StyleInfo.GetDirection(System.String,fyiReporting.RDL.DirectionEnum)">
            <summary>
            Gets the direction of the text.
            </summary>
            <param name="v"></param>
            <param name="def"></param>
            <returns></returns>
        </member>
        <member name="M:fyiReporting.RDL.StyleInfo.GetWritingMode(System.String,fyiReporting.RDL.WritingModeEnum)">
            <summary>
            Gets the writing mode; e.g. left right top bottom or top bottom left right.
            </summary>
            <param name="v"></param>
            <param name="def"></param>
            <returns></returns>
        </member>
        <member name="M:fyiReporting.RDL.StyleInfo.GetUnicodeBiDirectional(System.String,fyiReporting.RDL.UnicodeBiDirectionalEnum)">
            <summary>
            Gets the unicode BiDirectional.
            </summary>
            <param name="v"></param>
            <param name="def"></param>
            <returns></returns>
        </member>
        <member name="M:fyiReporting.RDL.StyleInfo.GetCalendar(System.String,fyiReporting.RDL.CalendarEnum)">
            <summary>
            Gets the calendar (e.g. Gregorian, GregorianArabic, and so on)
            </summary>
            <param name="v"></param>
            <param name="def"></param>
            <returns></returns>
        </member>
        <member name="P:fyiReporting.RDL.StyleInfo.FontFamily">
            <summary>
            Name of the font family Default: Arial
            </summary>
        </member>
        <member name="P:fyiReporting.RDL.StyleInfo.FontFamilyFull">
            <summary>
            Name of the font family Default: Arial.  Support list of families separated by ','.
            </summary>
        </member>
        <member name="T:fyiReporting.RDL.patternTypeEnum">
            <summary>
            The types of patterns supported.
            </summary>
        </member>
        <member name="T:fyiReporting.RDL.BackgroundGradientTypeEnum">
            <summary>
            The types of background gradients supported.
            </summary>
        </member>
        <member name="F:fyiReporting.RDL.BackgroundGradientTypeEnum.None">
            <summary>
            No gradient
            </summary>
        </member>
        <member name="F:fyiReporting.RDL.BackgroundGradientTypeEnum.LeftRight">
            <summary>
            Left Right gradient
            </summary>
        </member>
        <member name="F:fyiReporting.RDL.BackgroundGradientTypeEnum.TopBottom">
            <summary>
            Top Bottom gradient
            </summary>
        </member>
        <member name="F:fyiReporting.RDL.BackgroundGradientTypeEnum.Center">
            <summary>
            Center gradient
            </summary>
        </member>
        <member name="F:fyiReporting.RDL.BackgroundGradientTypeEnum.DiagonalLeft">
            <summary>
            Diagonal Left gradient
            </summary>
        </member>
        <member name="F:fyiReporting.RDL.BackgroundGradientTypeEnum.DiagonalRight">
            <summary>
            Diagonal Right gradient
            </summary>
        </member>
        <member name="F:fyiReporting.RDL.BackgroundGradientTypeEnum.HorizontalCenter">
            <summary>
            Horizontal Center gradient
            </summary>
        </member>
        <member name="F:fyiReporting.RDL.BackgroundGradientTypeEnum.VerticalCenter">
            <summary>
            Vertical Center
            </summary>
        </member>
        <member name="T:fyiReporting.RDL.FontStyleEnum">
            <summary>
            Font styles supported
            </summary>
        </member>
        <member name="F:fyiReporting.RDL.FontStyleEnum.Normal">
            <summary>
            Normal font
            </summary>
        </member>
        <member name="F:fyiReporting.RDL.FontStyleEnum.Italic">
            <summary>
            Italic font
            </summary>
        </member>
        <member name="T:fyiReporting.RDL.FontWeightEnum">
            <summary>
            Potential font weights
            </summary>
        </member>
        <member name="F:fyiReporting.RDL.FontWeightEnum.Lighter">
            <summary>
            Lighter font
            </summary>
        </member>
        <member name="F:fyiReporting.RDL.FontWeightEnum.Normal">
            <summary>
            Normal font
            </summary>
        </member>
        <member name="F:fyiReporting.RDL.FontWeightEnum.Bold">
            <summary>
            Bold font
            </summary>
        </member>
        <member name="F:fyiReporting.RDL.FontWeightEnum.Bolder">
            <summary>
            Bolder font
            </summary>
        </member>
        <member name="F:fyiReporting.RDL.FontWeightEnum.W100">
            <summary>
            W100 font
            </summary>
        </member>
        <member name="F:fyiReporting.RDL.FontWeightEnum.W200">
            <summary>
            W200 font
            </summary>
        </member>
        <member name="F:fyiReporting.RDL.FontWeightEnum.W300">
            <summary>
            W300 font
            </summary>
        </member>
        <member name="F:fyiReporting.RDL.FontWeightEnum.W400">
            <summary>
            W400 font
            </summary>
        </member>
        <member name="F:fyiReporting.RDL.FontWeightEnum.W500">
            <summary>
            W500 font
            </summary>
        </member>
        <member name="F:fyiReporting.RDL.FontWeightEnum.W600">
            <summary>
            W600 font
            </summary>
        </member>
        <member name="F:fyiReporting.RDL.FontWeightEnum.W700">
            <summary>
            W700 font
            </summary>
        </member>
        <member name="F:fyiReporting.RDL.FontWeightEnum.W800">
            <summary>
            W800 font
            </summary>
        </member>
        <member name="F:fyiReporting.RDL.FontWeightEnum.W900">
            <summary>
            W900 font
            </summary>
        </member>
        <member name="T:fyiReporting.RDL.Utility.Measurement">
            <summary>
            A utility class that contains additional 
            methods for drawing and unit conversion (points/pixels).
            </summary>
        </member>
        <member name="F:fyiReporting.RDL.Utility.Measurement.POINTSIZE_F">
            <summary>
            The constant value used to calculate the conversion of pixels into points, as a float.
            </summary>
        </member>
        <member name="F:fyiReporting.RDL.Utility.Measurement.POINTSIZE_M">
            <summary>
            The constant value used to calculate the conversion of pixels into points, as a decimal.
            </summary>
        </member>
        <member name="M:fyiReporting.RDL.Utility.Measurement.RectFromPoints(System.Drawing.Point,System.Drawing.Point)">
            <summary>
            A method used to obtain a rectangle from the screen coordinates supplied.
            </summary>
        </member>
        <member name="M:fyiReporting.RDL.Utility.Measurement.PointsFromPixels(System.Single,System.Single)">
            <summary>
            A method used to convert pixels into points.
            </summary>
            <returns>A float containing the converted measurement of the pixels into points.</returns>
        </member>
        <member name="M:fyiReporting.RDL.Utility.Measurement.PointsFromPixels(System.Single,System.Single,System.Drawing.PointF)">
            <summary>
            A method used to convert pixels into points.
            </summary>
            <returns>A PointF containing the point X and Y values for the pixel X and Y values that were supplied.</returns>
        </member>
        <member name="M:fyiReporting.RDL.Utility.Measurement.PixelsFromPoints(System.Single,System.Single)">
            <summary>
            A method used to convert points into pixels.
            </summary>
            <returns>An int containing the converted measurement of the points into pixels.</returns>
        </member>
        <member name="M:fyiReporting.RDL.Utility.Measurement.PixelsFromPoints(System.Single,System.Single,System.Drawing.PointF)">
            <summary>
            A method used to convert points into pixels.
            </summary>
            <returns>A PointF containing the pixel X and Y values for the point X and Y values that were supplied.</returns>
        </member>
        <member name="M:fyiReporting.RDL.Utility.Measurement.TwipsFromPoints(System.Single)">
            <summary>
            A method used to convert points into twips.
            </summary>
            <returns>An int containing the twips for the number of points that were supplied.</returns>
        </member>
        <member name="M:fyiReporting.RDL.Utility.Measurement.TwipsFromPixels(System.Single,System.Single)">
            <summary>
            A method used to convert pixels into twips.
            </summary>
            <returns>An int containing the twips for the number of pixels that were supplied.</returns>
        </member>
        <member name="M:fyiReporting.RDL.Utility.Measurement.PointsX(System.Single,System.Single)">
            <summary>
            A method used to convert Pixels into Points. Obsolete. Use PointsFromPixels instead.
            </summary>
            <returns>A float containing the converted measurement of the pixels into points.</returns>
        </member>
        <member name="M:fyiReporting.RDL.Utility.Measurement.PointsY(System.Single,System.Single)">
            <summary>
            A method used to convert Pixels into Points. Obsolete. Use PointsFromPixels instead.
            </summary>
            <returns>A float containing the converted measurement of the pixels into points.</returns>
        </member>
        <member name="M:fyiReporting.RDL.Utility.Measurement.PixelsX(System.Single,System.Single)">
            <summary>
            A method used to convert Points into Pixels. Obsolete. Use PixelsFromPoints instead.
            </summary>
            <returns>An int containing the converted measurement of the points into pixels.</returns>
        </member>
        <member name="M:fyiReporting.RDL.Utility.Measurement.PixelsY(System.Single,System.Single)">
            <summary>
            A method used to convert Points into Pixels. Obsolete. Use PixelsFromPoints instead.
            </summary>
            <returns>An int containing the converted measurement of the points into pixels.</returns>
        </member>
    </members>
</doc>
