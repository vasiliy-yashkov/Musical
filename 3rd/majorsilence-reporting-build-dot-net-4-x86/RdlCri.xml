<?xml version="1.0"?>
<doc>
    <assembly>
        <name>RdlCri</name>
    </assembly>
    <members>
        <member name="M:fyiReporting.CRI.AztecCode.DrawImage(System.Drawing.Bitmap@,System.String)">
            <summary>
            Does the actual drawing of the image.
            </summary>
            <param name="bm"></param>
            <param name="AztecCode"></param>
        </member>
        <member name="M:fyiReporting.CRI.AztecCode.fyiReporting#RDL#ICustomReportItem#DrawDesignerImage(System.Drawing.Bitmap@)">
            <summary>
            Design time: Draw a hard coded BarCode for design time;  Parameters can't be
            relied on since they aren't available.
            </summary>
            <param name="bm"></param>
        </member>
        <member name="M:fyiReporting.CRI.AztecCode.fyiReporting#RDL#ICustomReportItem#GetCustomReportItemXml">
            <summary>
            Design time call: return string with <CustomReportItem> ... </CustomReportItem> syntax for 
            the insert.  The string contains a variable {0} which will be substituted with the
            configuration name.  This allows the name to be completely controlled by
            the configuration file.
            </summary>
            <returns></returns>
        </member>
        <member name="T:fyiReporting.CRI.AztecCode.BarCodePropertiesAztecCode">
            <summary>
            BarCodeProperties- All properties are type string to allow for definition of
            a runtime expression.
            </summary>
        </member>
        <member name="M:fyiReporting.CRI.BarCode128.DrawDesignerImage(System.Drawing.Bitmap@)">
            <summary>
            Design time: Draw a hard coded BarCode for design time;  Parameters can't be
            relied on since they aren't available.
            </summary>
            <param name="bm"></param>
        </member>
        <member name="M:fyiReporting.CRI.BarCode128.GetCustomReportItemXml">
            <summary>
            Design time call: return string with <CustomReportItem> ... </CustomReportItem> syntax for 
            the insert.  The string contains a variable {0} which will be substituted with the
            configuration name.  This allows the name to be completely controlled by
            the configuration file.
            </summary>
            <returns></returns>
        </member>
        <member name="T:fyiReporting.CRI.BarCode128.BarCodeProperties">
            <summary>
            BarCodeProperties- All properties are type string to allow for definition of
            a runtime expression.
            </summary>
        </member>
        <member name="M:fyiReporting.CRI.BarCodeEAN8.DrawDesignerImage(System.Drawing.Bitmap@)">
            <summary>
            Design time: Draw a hard coded BarCode for design time;  Parameters can't be
            relied on since they aren't available.
            </summary>
            <param name="bm"></param>
        </member>
        <member name="M:fyiReporting.CRI.BarCodeEAN8.GetCustomReportItemXml">
            <summary>
            Design time call: return string with <CustomReportItem> ... </CustomReportItem> syntax for 
            the insert.  The string contains a variable {0} which will be substituted with the
            configuration name.  This allows the name to be completely controlled by
            the configuration file.
            </summary>
            <returns></returns>
        </member>
        <member name="T:fyiReporting.CRI.BarCodeEAN8.BarCodeProperties">
            <summary>
            BarCodeProperties- All properties are type string to allow for definition of
            a runtime expression.
            </summary>
        </member>
        <member name="T:fyiReporting.CRI.BarCodeBookland">
            <summary>
            BarCodeBookland: create Bookland compatible BarCode images.
                See http://www.barcodeisland.com/bookland.phtml for description of how to
                construct a Bookland compatible barcode.  In essence, Bookland is simply 
                EAN-13 barcode with a number system of 978.
            </summary>
        </member>
        <member name="M:fyiReporting.CRI.BarCodeBookland.DrawImage(System.Drawing.Bitmap@)">
            <summary>
            Runtime: Draw the BarCode
            </summary>
            <param name="bm">Bitmap to draw the barcode in.</param>
        </member>
        <member name="M:fyiReporting.CRI.BarCodeBookland.DrawDesignerImage(System.Drawing.Bitmap@)">
            <summary>
            Design time: Draw a hard coded BarCode for design time;  Parameters can't be
            relied on since they aren't available.
            </summary>
            <param name="bm"></param>
        </member>
        <member name="M:fyiReporting.CRI.BarCodeBookland.IsDataRegion">
            <summary>
            BarCode isn't a DataRegion
            </summary>
            <returns></returns>
        </member>
        <member name="M:fyiReporting.CRI.BarCodeBookland.SetProperties(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Set the properties;  No validation is done at this time.
            </summary>
            <param name="props"></param>
        </member>
        <member name="M:fyiReporting.CRI.BarCodeBookland.GetCustomReportItemXml">
            <summary>
            Design time call: return string with <CustomReportItem> ... </CustomReportItem> syntax for 
            the insert.  The string contains a variable {0} which will be substituted with the
            configuration name.  This allows the name to be completely controlled by
            the configuration file.
            </summary>
            <returns></returns>
        </member>
        <member name="M:fyiReporting.CRI.BarCodeBookland.GetPropertiesInstance(System.Xml.XmlNode)">
            <summary>
            Return an instance of the class representing the properties.
            This method is called at design time;
            </summary>
            <returns></returns>
        </member>
        <member name="M:fyiReporting.CRI.BarCodeBookland.SetPropertiesInstance(System.Xml.XmlNode,System.Object)">
            <summary>
            Set the custom properties given the properties object
            </summary>
            <param name="node"></param>
            <param name="inst"></param>
        </member>
        <member name="M:fyiReporting.CRI.BarCodeBookland.GetNamedElementValue(System.Xml.XmlNode,System.String,System.String)">
            <summary>
            Get the child element with the specified name.  Return the InnerText
            value if found otherwise return the passed default.
            </summary>
            <param name="xNode">Parent node</param>
            <param name="name">Name of child node to look for</param>
            <param name="def">Default value to use if not found</param>
            <returns>Value the named child node</returns>
        </member>
        <member name="T:fyiReporting.CRI.BarCodeBookland.BarCodeBooklandProperties">
            <summary>
            BarCodeProperties- All properties are type string to allow for definition of
            a runtime expression.
            </summary>
        </member>
        <member name="T:fyiReporting.CRI.BarCodeEAN13">
            <summary>
            BarCode: create EAN-13 compatible BarCode images.
                See http://www.barcodeisland.com/ean13.phtml for description of how to
                construct a EAN-13 compatible barcode
                See http://194.203.97.138/eanucc/ for the specification.
            </summary>
        </member>
        <member name="M:fyiReporting.CRI.BarCodeEAN13.DrawImage(System.Drawing.Bitmap@)">
            <summary>
            Runtime: Draw the BarCode
            </summary>
            <param name="bm">Bitmap to draw the barcode in.</param>
        </member>
        <member name="M:fyiReporting.CRI.BarCodeEAN13.DrawDesignerImage(System.Drawing.Bitmap@)">
            <summary>
            Design time: Draw a hard coded BarCode for design time;  Parameters can't be
            relied on since they aren't available.
            </summary>
            <param name="bm"></param>
        </member>
        <member name="M:fyiReporting.CRI.BarCodeEAN13.DrawImage(System.Drawing.Bitmap,System.String)">
            <summary>
            DrawImage given a Bitmap and a upcode does all the drawing work.
            </summary>
            <param name="bm"></param>
            <param name="upcode"></param>
        </member>
        <member name="M:fyiReporting.CRI.BarCodeEAN13.IsDataRegion">
            <summary>
            BarCode isn't a DataRegion
            </summary>
            <returns></returns>
        </member>
        <member name="M:fyiReporting.CRI.BarCodeEAN13.SetProperties(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Set the properties;  No validation is done at this time.
            </summary>
            <param name="props"></param>
        </member>
        <member name="M:fyiReporting.CRI.BarCodeEAN13.GetCustomReportItemXml">
            <summary>
            Design time call: return string with <CustomReportItem> ... </CustomReportItem> syntax for 
            the insert.  The string contains a variable {0} which will be substituted with the
            configuration name.  This allows the name to be completely controlled by
            the configuration file.
            </summary>
            <returns></returns>
        </member>
        <member name="M:fyiReporting.CRI.BarCodeEAN13.GetPropertiesInstance(System.Xml.XmlNode)">
            <summary>
            Return an instance of the class representing the properties.
            This method is called at design time;
            </summary>
            <returns></returns>
        </member>
        <member name="M:fyiReporting.CRI.BarCodeEAN13.SetPropertiesInstance(System.Xml.XmlNode,System.Object)">
            <summary>
            Set the custom properties given the properties object
            </summary>
            <param name="node"></param>
            <param name="inst"></param>
        </member>
        <member name="M:fyiReporting.CRI.BarCodeEAN13.GetEncoding(System.String)">
            <summary>
            GetEncoding returns a string representing the on/off bars.  It should be passed
            a string of 12 characters: Country code 2 chars + Manufacturers code 5 chars +
            Product code 5 chars.   
            </summary>
            <param name="upccode"></param>
            <returns></returns>
        </member>
        <member name="M:fyiReporting.CRI.BarCodeEAN13.CheckSum(System.String)">
            <summary>
            Calculate the checksum: (sum odd digits * 3 + sum even digits ) 
              Checksum is the number that must be added to sum to make it 
              evenly divisible by 10
            </summary>
            <param name="upccode"></param>
            <returns></returns>
        </member>
        <member name="M:fyiReporting.CRI.BarCodeEAN13.GetNamedElementValue(System.Xml.XmlNode,System.String,System.String)">
            <summary>
            Get the child element with the specified name.  Return the InnerText
            value if found otherwise return the passed default.
            </summary>
            <param name="xNode">Parent node</param>
            <param name="name">Name of child node to look for</param>
            <param name="def">Default value to use if not found</param>
            <returns>Value the named child node</returns>
        </member>
        <member name="T:fyiReporting.CRI.BarCodeEAN13.BarCodeProperties">
            <summary>
            BarCodeProperties- All properties are type string to allow for definition of
            a runtime expression.
            </summary>
        </member>
        <member name="M:fyiReporting.CRI.BarCode39.DrawDesignerImage(System.Drawing.Bitmap@)">
            <summary>
            Design time: Draw a hard coded BarCode for design time;  Parameters can't be
            relied on since they aren't available.
            </summary>
            <param name="bm"></param>
        </member>
        <member name="M:fyiReporting.CRI.BarCode39.GetCustomReportItemXml">
            <summary>
            Design time call: return string with <CustomReportItem> ... </CustomReportItem> syntax for 
            the insert.  The string contains a variable {0} which will be substituted with the
            configuration name.  This allows the name to be completely controlled by
            the configuration file.
            </summary>
            <returns></returns>
        </member>
        <member name="T:fyiReporting.CRI.BarCode39.BarCodeProperties">
            <summary>
            BarCodeProperties- All properties are type string to allow for definition of
            a runtime expression.
            </summary>
        </member>
        <member name="M:fyiReporting.CRI.PixelConversions.GetMagnification(System.Drawing.Graphics,System.Int32,System.Int32,System.Single,System.Single)">
            <summary>
            
            </summary>
            <param name="g"></param>
            <param name="width"></param>
            <param name="height"></param>
            <param name="OptimalHeight"></param>
            <param name="OptimalWidth"></param>
            <returns></returns>
        </member>
        <member name="M:fyiReporting.CRI.QrCode.DrawImage(System.Drawing.Bitmap@,System.String)">
            <summary>
            Does the actual drawing of the image.
            </summary>
            <param name="bm"></param>
            <param name="qrcode"></param>
        </member>
        <member name="M:fyiReporting.CRI.QrCode.fyiReporting#RDL#ICustomReportItem#DrawDesignerImage(System.Drawing.Bitmap@)">
            <summary>
            Design time: Draw a hard coded BarCode for design time;  Parameters can't be
            relied on since they aren't available.
            </summary>
            <param name="bm"></param>
        </member>
        <member name="M:fyiReporting.CRI.QrCode.fyiReporting#RDL#ICustomReportItem#GetCustomReportItemXml">
            <summary>
            Design time call: return string with <CustomReportItem> ... </CustomReportItem> syntax for 
            the insert.  The string contains a variable {0} which will be substituted with the
            configuration name.  This allows the name to be completely controlled by
            the configuration file.
            </summary>
            <returns></returns>
        </member>
        <member name="T:fyiReporting.CRI.QrCode.BarCodePropertiesQR">
            <summary>
            BarCodeProperties- All properties are type string to allow for definition of
            a runtime expression.
            </summary>
        </member>
        <member name="M:fyiReporting.CRI.XmlHelpers.GetNamedElementValue(System.Xml.XmlNode,System.String,System.String)">
            <summary>
            Get the child element with the specified name.  Return the InnerText
            value if found otherwise return the passed default.
            </summary>
            <param name="xNode">Parent node</param>
            <param name="name">Name of child node to look for</param>
            <param name="def">Default value to use if not found</param>
            <returns>Value the named child node</returns>
        </member>
    </members>
</doc>
